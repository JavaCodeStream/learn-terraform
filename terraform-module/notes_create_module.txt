Hands-on Create local module
--------------------------------------
- We are creating a child module, for simplicity a thin wrapper of ec2 security group.

path: terraform-module/create-module/child-module

$ pwd
/Users/sandip/box/work/learnings/terraform/learn-terraform/terraform-module/create-module/child-module

$ tree
.
├── main.tf
└── outputs.tf


main.tf
-------
resource "aws_security_group" "ec2_security_grp" {
  name        = "ec2_security_grp"
  description = "Allow SSH inbound traffic"

  ingress {
    description = "SSH into VPC"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  egress {
    description = "Outbound Allowed"
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
}


outputs.tf
-----------
output "ec2_security_grp_id" {
    value = aws_security_group.ec2_security_grp.id
}



Using the above module in TF files under terraform-module/create-module/root-module
------------------------------------------------------------------------------------

$ pwd
/Users/sandip/box/work/learnings/terraform/learn-terraform/terraform-module/create-module/root-module

$ tree
.
├── main.tf
├── outputs.tf
└── providers.tf

providers.tf
------------
provider "aws" {
  region = "ap-south-1"

  # for access_key & secret_key set them as env variable.
}

main.tf
--------
# Using newly created module
module "ec2_sg_module" {
    source = "../child-module"
}

resource "aws_instance" "my_ec2" {
    ami           = "ami-01a4f99c4ac11b03c" # get it from console as per your aws region ap-south-1
    instance_type = "t2.micro"
    vpc_security_group_ids = [module.ec2_sg_module.ec2_security_grp_id] # referencing child module's exposed output
}


outputs.tf
-----------
output "my_ec2_instance_id" {
    value = aws_instance.my_ec2.id
}

output "my_ec2_public_ip" {
  value = aws_instance.my_ec2.public_ip
}

output "my_ec2_security_grp_name" {
    value = aws_instance.my_ec2.security_groups
}


$ terraform init

Initializing modules...
- ec2_sg_module in ../child-module

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v4.52.0...
- Installed hashicorp/aws v4.52.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!


$ export AWS_ACCESS_KEY_ID="<your_access_key_id>"
$ export AWS_SECRET_ACCESS_KEY="<your_secret_access_key>"


 terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.my_ec2 will be created
  + resource "aws_instance" "my_ec2" {
      + ami                                  = "ami-01a4f99c4ac11b03c"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags_all                             = (known after apply)
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # module.ec2_sg_module.aws_security_group.ec2_security_grp will be created
  + resource "aws_security_group" "ec2_security_grp" {
      + arn                    = (known after apply)
      + description            = "Allow SSH inbound traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Outbound Allowed"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 65535
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH into VPC"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "ec2_security_grp"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + my_ec2_instance_id       = (known after apply)
  + my_ec2_public_ip         = (known after apply)
  + my_ec2_security_grp_name = (known after apply)



- from the above plan, note: its creating 2 resources. 
1/ resource "aws_security_group" "ec2_security_grp" from module.ec2_sg_module
2/ resource "aws_instance" "my_ec2"

- security_group_ids is shows as known after apply i.e. after the security_group is created from 
child module.

vpc_security_group_ids               = (known after apply)




$ terraform apply -auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.my_ec2 will be created
  + resource "aws_instance" "my_ec2" {
      + ami                                  = "ami-01a4f99c4ac11b03c"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags_all                             = (known after apply)
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # module.ec2_sg_module.aws_security_group.ec2_security_grp will be created
  + resource "aws_security_group" "ec2_security_grp" {
      + arn                    = (known after apply)
      + description            = "Allow SSH inbound traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Outbound Allowed"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 65535
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH into VPC"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "ec2_security_grp"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + my_ec2_instance_id       = (known after apply)
  + my_ec2_public_ip         = (known after apply)
  + my_ec2_security_grp_name = (known after apply)
module.ec2_sg_module.aws_security_group.ec2_security_grp: Creating...
module.ec2_sg_module.aws_security_group.ec2_security_grp: Creation complete after 2s [id=sg-03f160529cd36b25d]
aws_instance.my_ec2: Creating...
aws_instance.my_ec2: Still creating... [10s elapsed]
aws_instance.my_ec2: Still creating... [20s elapsed]
aws_instance.my_ec2: Still creating... [30s elapsed]
aws_instance.my_ec2: Creation complete after 32s [id=i-076fe0c6b3f1f802b]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

my_ec2_instance_id = "i-076fe0c6b3f1f802b"
my_ec2_public_ip = "13.232.247.223"
my_ec2_security_grp_name = toset([
  "ec2_security_grp",
])


- from the above logs, we can see, terraform has created the security 
group (module.ec2_sg_module.aws_security_group.ec2_security_grp) from child module
and then created the ec2 instance (aws_instance.my_ec2) following the implicit dependency.

module.ec2_sg_module.aws_security_group.ec2_security_grp: Creating...
module.ec2_sg_module.aws_security_group.ec2_security_grp: Creation complete after 2s [id=sg-03f160529cd36b25d]
aws_instance.my_ec2: Creating...
aws_instance.my_ec2: Creation complete after 32s [id=i-076fe0c6b3f1f802b]




$ terraform destroy -auto-approve
module.ec2_sg_module.aws_security_group.ec2_security_grp: Refreshing state... [id=sg-03f160529cd36b25d]
aws_instance.my_ec2: Refreshing state... [id=i-076fe0c6b3f1f802b]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.my_ec2 will be destroyed
  - resource "aws_instance" "my_ec2" {
      - ami                                  = "ami-01a4f99c4ac11b03c" -> null
      - arn                                  = "arn:aws:ec2:ap-south-1:295631050085:instance/i-076fe0c6b3f1f802b" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "ap-south-1a" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-076fe0c6b3f1f802b" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-0c5a6ffd6bcff98a0" -> null
      - private_dns                          = "ip-172-31-35-182.ap-south-1.compute.internal" -> null
      - private_ip                           = "172.31.35.182" -> null
      - public_dns                           = "ec2-13-232-247-223.ap-south-1.compute.amazonaws.com" -> null
      - public_ip                            = "13.232.247.223" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [
          - "ec2_security_grp",
        ] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-0b0cbbfead5b4c566" -> null
      - tags                                 = {} -> null
      - tags_all                             = {} -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-03f160529cd36b25d",
        ] -> null

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - tags                  = {} -> null
          - throughput            = 0 -> null
          - volume_id             = "vol-07481d05d858c8186" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
        }
    }

  # module.ec2_sg_module.aws_security_group.ec2_security_grp will be destroyed
  - resource "aws_security_group" "ec2_security_grp" {
      - arn                    = "arn:aws:ec2:ap-south-1:295631050085:security-group/sg-03f160529cd36b25d" -> null
      - description            = "Allow SSH inbound traffic" -> null
      - egress                 = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = "Outbound Allowed"
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 65535
            },
        ] -> null
      - id                     = "sg-03f160529cd36b25d" -> null
      - ingress                = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = "SSH into VPC"
              - from_port        = 22
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 22
            },
        ] -> null
      - name                   = "ec2_security_grp" -> null
      - owner_id               = "295631050085" -> null
      - revoke_rules_on_delete = false -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
      - vpc_id                 = "vpc-0e325a255f57c75c0" -> null
    }

Plan: 0 to add, 0 to change, 2 to destroy.

Changes to Outputs:
  - my_ec2_instance_id       = "i-076fe0c6b3f1f802b" -> null
  - my_ec2_public_ip         = "13.232.247.223" -> null
  - my_ec2_security_grp_name = [
      - "ec2_security_grp",
    ] -> null
aws_instance.my_ec2: Destroying... [id=i-076fe0c6b3f1f802b]
aws_instance.my_ec2: Still destroying... [id=i-076fe0c6b3f1f802b, 10s elapsed]
aws_instance.my_ec2: Still destroying... [id=i-076fe0c6b3f1f802b, 20s elapsed]
aws_instance.my_ec2: Still destroying... [id=i-076fe0c6b3f1f802b, 30s elapsed]
aws_instance.my_ec2: Still destroying... [id=i-076fe0c6b3f1f802b, 40s elapsed]
aws_instance.my_ec2: Destruction complete after 40s
module.ec2_sg_module.aws_security_group.ec2_security_grp: Destroying... [id=sg-03f160529cd36b25d]
module.ec2_sg_module.aws_security_group.ec2_security_grp: Destruction complete after 0s

Destroy complete! Resources: 2 destroyed.




- from above logs, we can see, terraform has destroyed the resources in reverse order.
first, ec2 and then the security_group.

aws_instance.my_ec2: Destroying... [id=i-076fe0c6b3f1f802b]
aws_instance.my_ec2: Still destroying... [id=i-076fe0c6b3f1f802b, 10s elapsed]
aws_instance.my_ec2: Destruction complete after 40s
module.ec2_sg_module.aws_security_group.ec2_security_grp: Destroying... [id=sg-03f160529cd36b25d]
module.ec2_sg_module.aws_security_group.ec2_security_grp: Destruction complete after 0s



