Hands-On Using Module from Terraform Registry
-----------------------------------------------
- Here, we will use a simple module from terraform registry on our TF file.

Module: terraform-aws-modules/ec2-instance/aws

https://registry.terraform.io/modules/terraform-aws-modules/ec2-instance/aws/4.3.0

- Look at the inputs required to use this module.

https://registry.terraform.io/modules/terraform-aws-modules/ec2-instance/aws/4.3.0?tab=inputs

- Provision Instructions
Copy and paste into your Terraform configuration, insert the variables, and run terraform init:

module "ec2-instance" {
  source  = "terraform-aws-modules/ec2-instance/aws"
  version = "4.3.0"
}

- Inputs:

1/
name string
Description: Name to be used on EC2 instance created
Default: ""

2/
ami string
Description: ID of AMI to use for the instance
Default: null

3/
instance_type string
Description: The type of instance to start
Default: "t3.micro"

4/ 
subnet_id string
Description: The VPC Subnet ID to launch in
Default: null

- Since these 4 attribute values are mandatory to create an EC2 instance on AWS, and we can see
the default values for these on the module are not appropriate, hence we need to provide.



$ pwd
/Users/sandip/box/work/learnings/terraform/learn-terraform/terraform-module/use-registry-module

$ tree
.
├── main.tf
├── outputs.tf
└── providers.tf


providers.tf
------------
provider "aws" {
  region = "ap-south-1"

  # for access_key & secret_key set them as env variable.
}


main.tf
--------
- *** IMP NOTE: my_ec2_instance is the local name for the module. the same will be used for referring all
the exposed outouts. like: module.my_ec2_instance.<>

module "my_ec2_instance" {
  source  = "terraform-aws-modules/ec2-instance/aws"
  version = "4.3.0"

  name                   = "my_ec2_instance"         # override the default (empty)
  ami                    = "ami-01a4f99c4ac11b03c"  # get it from console as per your aws region ap-south-1
  instance_type          = "t2.micro"               # override the default (t3.micro)
}


outputs.tf
-----------
output "my_ec2_instance_public_ip" {
    value = module.my_ec2_instance.public_ip  # reference to the module registry's exposed output
}

output "my_ec2_instance_id" {
    value = module.my_ec2_instance.id   # reference to the module registry's exposed output
}




- terraform init installing module and provider plugins under working directory.

$ terraform init

Initializing modules...
Downloading registry.terraform.io/terraform-aws-modules/ec2-instance/aws 4.3.0 for my_ec2_instance...
- my_ec2_instance in .terraform/modules/my_ec2_instance

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/aws versions matching ">= 4.20.0"...
- Installing hashicorp/aws v4.52.0...
- Installed hashicorp/aws v4.52.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!




$ pwd
/Users/sandip/box/work/learnings/terraform/learn-terraform/terraform-module/use-registry-module


$ tree -a .
.
├── .terraform
│   ├── modules
│   │   ├── modules.json
│   │   └── my_ec2_instance
│   │       ├── .editorconfig
│   │       ├── .git
│   │       │   ├── HEAD
│   │       │   ├── config
│   │       │   ├── description
│   │       │   ├── hooks
│   │       │   │   ├── applypatch-msg.sample
│   │       │   │   ├── commit-msg.sample
│   │       │   │   ├── fsmonitor-watchman.sample
│   │       │   │   ├── post-update.sample
│   │       │   │   ├── pre-applypatch.sample
│   │       │   │   ├── pre-commit.sample
│   │       │   │   ├── pre-merge-commit.sample
│   │       │   │   ├── pre-push.sample
│   │       │   │   ├── pre-rebase.sample
│   │       │   │   ├── pre-receive.sample
│   │       │   │   ├── prepare-commit-msg.sample
│   │       │   │   ├── push-to-checkout.sample
│   │       │   │   └── update.sample
│   │       │   ├── index
│   │       │   ├── info
│   │       │   │   └── exclude
│   │       │   ├── logs
│   │       │   │   ├── HEAD
│   │       │   │   └── refs
│   │       │   │       ├── heads
│   │       │   │       │   └── master
│   │       │   │       └── remotes
│   │       │   │           └── origin
│   │       │   │               └── HEAD
│   │       │   ├── objects
│   │       │   │   ├── info
│   │       │   │   └── pack
│   │       │   │       ├── pack-e7822b52d4c190562bc47f566fb2f4778e1a9a91.idx
│   │       │   │       └── pack-e7822b52d4c190562bc47f566fb2f4778e1a9a91.pack
│   │       │   ├── packed-refs
│   │       │   └── refs
│   │       │       ├── heads
│   │       │       │   └── master
│   │       │       ├── remotes
│   │       │       │   └── origin
│   │       │       │       └── HEAD
│   │       │       └── tags
│   │       ├── .github
│   │       │   └── workflows
│   │       │       ├── lock.yml
│   │       │       ├── pr-title.yml
│   │       │       ├── pre-commit.yml
│   │       │       ├── release.yml
│   │       │       └── stale-actions.yaml
│   │       ├── .gitignore
│   │       ├── .pre-commit-config.yaml
│   │       ├── .releaserc.json
│   │       ├── CHANGELOG.md
│   │       ├── LICENSE
│   │       ├── README.md
│   │       ├── UPGRADE-3.0.md
│   │       ├── examples
│   │       │   ├── complete
│   │       │   │   ├── README.md
│   │       │   │   ├── main.tf
│   │       │   │   ├── outputs.tf
│   │       │   │   ├── variables.tf
│   │       │   │   └── versions.tf
│   │       │   └── volume-attachment
│   │       │       ├── README.md
│   │       │       ├── main.tf
│   │       │       ├── outputs.tf
│   │       │       ├── variables.tf
│   │       │       └── versions.tf
│   │       ├── main.tf
│   │       ├── outputs.tf
│   │       ├── variables.tf
│   │       ├── versions.tf
│   │       └── wrappers
│   │           ├── README.md
│   │           ├── main.tf
│   │           ├── outputs.tf
│   │           ├── variables.tf
│   │           └── versions.tf
│   └── providers
│       └── registry.terraform.io
│           └── hashicorp
│               └── aws
│                   └── 4.52.0
│                       └── darwin_arm64
│                           └── terraform-provider-aws_v4.52.0_x5
├── .terraform.lock.hcl
├── main.tf
├── outputs.tf
└── providers.tf

32 directories, 64 files



-------------------------


$ terraform plan

$ terraform apply -auto-approve

module.my_ec2_instance.data.aws_partition.current: Reading...
module.my_ec2_instance.data.aws_ssm_parameter.this[0]: Reading...
module.my_ec2_instance.data.aws_partition.current: Read complete after 0s [id=aws]
module.my_ec2_instance.data.aws_ssm_parameter.this[0]: Read complete after 1s [id=/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # module.my_ec2_instance.aws_instance.this[0] will be created
  + resource "aws_instance" "this" {
      + ami                                  = (sensitive value)
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = false
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "my_ec2_instance"
        }
      + tags_all                             = {
          + "Name" = "my_ec2_instance"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + volume_tags                          = {
          + "Name" = "my_ec2_instance"
        }
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + credit_specification {}

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = "enabled"
          + http_put_response_hop_limit = 1
          + http_tokens                 = "optional"
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + timeouts {}
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + my_ec2_instance_id        = (known after apply)
  + my_ec2_instance_public_ip = (known after apply)
module.my_ec2_instance.aws_instance.this[0]: Creating...
module.my_ec2_instance.aws_instance.this[0]: Still creating... [10s elapsed]
module.my_ec2_instance.aws_instance.this[0]: Still creating... [20s elapsed]
module.my_ec2_instance.aws_instance.this[0]: Still creating... [30s elapsed]
module.my_ec2_instance.aws_instance.this[0]: Creation complete after 32s [id=i-00f3ed77b6d63abb4]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

my_ec2_instance_id = "i-00f3ed77b6d63abb4"
my_ec2_instance_public_ip = "35.154.173.199"



--------------------------


$ terraform destroy -auto-approve

module.my_ec2_instance.data.aws_partition.current: Reading...
module.my_ec2_instance.data.aws_ssm_parameter.this[0]: Reading...
module.my_ec2_instance.data.aws_partition.current: Read complete after 0s [id=aws]
module.my_ec2_instance.data.aws_ssm_parameter.this[0]: Read complete after 0s [id=/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2]
module.my_ec2_instance.aws_instance.this[0]: Refreshing state... [id=i-00f3ed77b6d63abb4]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  - destroy

Terraform will perform the following actions:

  # module.my_ec2_instance.aws_instance.this[0] will be destroyed
  - resource "aws_instance" "this" {
      - ami                                  = (sensitive value) -> null
      - arn                                  = "arn:aws:ec2:ap-south-1:295631050085:instance/i-00f3ed77b6d63abb4" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "ap-south-1a" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - host_id                              = "" -> null
      - iam_instance_profile                 = "" -> null
      - id                                   = "i-00f3ed77b6d63abb4" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - key_name                             = "" -> null
      - monitoring                           = false -> null
      - outpost_arn                          = "" -> null
      - password_data                        = "" -> null
      - placement_group                      = "" -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-0f85fd045c5808f40" -> null
      - private_dns                          = "ip-172-31-40-158.ap-south-1.compute.internal" -> null
      - private_ip                           = "172.31.40.158" -> null
      - public_dns                           = "ec2-35-154-173-199.ap-south-1.compute.amazonaws.com" -> null
      - public_ip                            = "35.154.173.199" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [
          - "default",
        ] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-0b0cbbfead5b4c566" -> null
      - tags                                 = {
          - "Name" = "my_ec2_instance"
        } -> null
      - tags_all                             = {
          - "Name" = "my_ec2_instance"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - volume_tags                          = {
          - "Name" = "my_ec2_instance"
        } -> null
      - vpc_security_group_ids               = [
          - "sg-09821735d6cf83354",
        ] -> null

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - tags                  = {} -> null
          - throughput            = 0 -> null
          - volume_id             = "vol-014747e4db7633c03" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
        }

      - timeouts {}
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Changes to Outputs:
  - my_ec2_instance_id        = "i-00f3ed77b6d63abb4" -> null
  - my_ec2_instance_public_ip = "35.154.173.199" -> null
module.my_ec2_instance.aws_instance.this[0]: Destroying... [id=i-00f3ed77b6d63abb4]
module.my_ec2_instance.aws_instance.this[0]: Still destroying... [id=i-00f3ed77b6d63abb4, 10s elapsed]
module.my_ec2_instance.aws_instance.this[0]: Still destroying... [id=i-00f3ed77b6d63abb4, 20s elapsed]
module.my_ec2_instance.aws_instance.this[0]: Still destroying... [id=i-00f3ed77b6d63abb4, 30s elapsed]
module.my_ec2_instance.aws_instance.this[0]: Destruction complete after 30s

Destroy complete! Resources: 1 destroyed.