Input Variables in Terraform
==============================

- It not best practice to hard code attribute values directly within the resource blocks in Terraform
config files as it limits the re-usability of the code which defeats the purpose of IaC.
- We need to make sure the same config code can be used again and again to deploy resources based on 
set of input variables that can be provided during the execution time.
- that is where Input Variables come into picture.

- We can keep the input variables in the same main.tf file along with the resource blocks BUT 
Best practice is to keep all of the input variables code in a single tf file variables.tf

- Input variables are just like resource blocks consists of blocks and arguments.

- syntax: 
    - keyword -> variable followed by the variable name.
    - The label after the variable keyword is a name for the variable, which must 
    be unique among all variables in the same module.
    - The name of a variable can be any valid identifier except the following: source, 
    version, providers, count, for_each, lifecycle, depends_on, 
    locals (reserved for meta-arguments)
    - within the variable block, we can provide a default value to each variable. this is an optional
    attribute but it is a quick and simple way to assign variables.
    - to use these variables, var.<name_of_variable> within respective resource block
    - NOTE: input variables does not accept any expression like: 
    variable "filename" {
        default = "${path.module}/my_local_file.txt"
    }

    for that we need to use like:

    resource "local_file" "my-local-file" {
        filename = "${path.module}/${var.filename}"
        content  = var.content
    }


variables.tf
--------------
variable "filename" {
  default = "my_local_file.txt"
}

variable "content" {
  default = "We love Pets!!"
}

variable "prefix" {
  default = "Mrs"
}

variable "separator" {
  default = "."
}

variable "length" {
  default = "1"
}


main.tf
------------------------------------------
resource "local_file" "my-local-file" {
  filename = var.filename
  content  = var.content
}

resource "random_pet" "my-pet" {
  prefix    = var.prefix
  separator = var.separator
  length    = var.filename
}



Similarly creating aws resource for EC2 instance:
--------------------------------------------------

main.tf
--------
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 4.16"
    }
  }

  required_version = ">= 1.2.0"
}

provider "aws" {
  region  = "us-west-2"
}

resource "aws_instance" "app_server" {
  ami           = var.ami
  instance_type = var.instance_type

  tags = {
    Name = "ExampleAppServerInstance"
  }
}

variables.tf
--------------
variable "ami" {
  default = "ami-830c94e3"
}

variable "instance_type" {
  default = "t2.micro"
}


Arguments of input variables
=================================
- accepts 6 arguments.
  - default - A default value which then makes the variable optional.
  - type - This argument specifies what value types are accepted for the variable.
  - description - This specifies the input variable's documentation.
  - validation - A block to define validation rules, usually in addition to type constraints.
  - sensitive - Limits Terraform UI output when the variable is used in configuration.
  - nullable - Specify if the variable can be null within the module.
 and description

variable "filename" {
    type = "string"
    description = "path of local file"
    default = "my_local_file.txt"
}


Default values
---------------
- If present, the default value will be used if no value is set when calling the 
module or running Terraform. 
- he default argument requires a literal value and cannot reference other 
objects in the configuration.
ex: below is not allowed:
    variable "filename" {
        default = "${path.module}/my_local_file.txt"
    }



Types
=========================
- allows you to restrict the type of value that will be accepted as the value for a variable.
- If no type constraint is set then a value of any type is accepted.

- While type constraints are optional, they allow Terraform to return a helpful error 
message if the wrong type is used.

type keywords are:

string
number
bool

complex types such as collections:

list(<TYPE>)
-------------
- list can have duplicates.

ex:
variable "instance_types_names" {
  type    = list(string)
  default = ["m5.large", "m5.xlarge", "m5.small"]
}

- Its also possible to use one of value using the positional index.
resource "aws_instance" "myec2" {
  ami = var.ami_id
  instance_type = var.instance_types_names[0]
}


set(<TYPE>)
-------------
- set cant have duplicates.

ex:
variable "availability_zone_names" {
  type    = set(string)
  default = ("us-west-1a", "us-west-1b")
}


map(<TYPE>)
-------------
variable "tags" {
  type    = map(string)
  default = {
    Name = "foobar-terraform-elb",
    asset = "aws"
  }
}

- Its also possible to access only one of value from the map type variable.
ex:
variable "types" {
  type    = map
  default = {
    us-east-1 = "t2.micro",
    us-west-2 = "t2.nano",
    ap-south-1 = "t2.small"
  }
}

resource "aws_instance" "myec2" {
  ami = var.ami_id
  instance_type = var.types["us-east-1"]
}


example:
variable "vpc_cidr_block" {
  type = map
  default = {
    us-east-1 = "192.168.10.0/24"
    ap-south-1 = "192.168.20.0/24"
    us-west-2  = "10.77.0.0/16"
  }
}

Usage: var.vpc_cidr_block["us-west-2"]


object({<ATTR NAME> = <TYPE>, ... })
-------------------------------------

variable "docker_ports" {
  type = list(object({
    internal = number
    external = number
    protocol = string
  }))
  default = [
    {
      internal = 8300
      external = 8300
      protocol = "tcp"
    }
  ]
}



tuple([<TYPE>, ...])
----------------------



example:

variable "image_id" {
  type = string
}

variable "availability_zone_names" {
  type    = list(string)
  default = ["us-west-1a"]
}

variable "docker_ports" {
  type = list(object({
    internal = number
    external = number
    protocol = string
  }))
  default = [
    {
      internal = 8300
      external = 8300
      protocol = "tcp"
    }
  ]
}





Input Variable Documentation
---------------------------------
- Because the input variables of a module are part of its user interface, you can briefly 
describe the purpose of each variable using the optional description argument:


variable "image_id" {
  type        = string
  description = "The id of the machine image (AMI) to use for the server."
}




Custom Validation Rules
-------------------------
- This feature was introduced in Terraform CLI v0.13.0.

- specify custom validation rules for a particular variable by adding a validation block 
within the corresponding variable block.


variable "image_id" {
  type        = string
  description = "The id of the machine image (AMI) to use for the server."

  validation {
    condition     = length(var.image_id) > 4 && substr(var.image_id, 0, 4) == "ami-"
    error_message = "The image_id value must be a valid AMI id, starting with \"ami-\"."
  }
}





Suppressing Values in CLI Output (sensitive)
------------------------------------------------
- This feature was introduced in Terraform v0.14.0.

- Setting a variable as sensitive prevents Terraform from showing its value in the 
plan or apply output.

- *** IMP NOTE: Terraform will still record sensitive values in the state, and so anyone who can 
access the state data will have access to the sensitive values in cleartext. 

variable "user_information" {
  type = object({
    name    = string
    address = string
  })
  sensitive = true
}

resource "some_resource" "a" {
  name    = var.user_information.name
  address = var.user_information.address
}


- in the above example the two arguments of resource "some_resource" "a" will also be hidden 
in the plan output:

Terraform will perform the following actions:

  # some_resource.a will be created
  + resource "some_resource" "a" {
      + name    = (sensitive value)
      + address = (sensitive value)
    }

Plan: 1 to add, 0 to change, 0 to destroy.





Disallowing Null Input Values
------------------------------------
- This feature is available in Terraform v1.1.0 and later.

- The nullable argument in a variable block controls whether the module caller may assign \
the value null to the variable.

variable "example" {
  type     = string
  nullable = false
}


- The default value for nullable is true. When nullable is true, null is a valid value 
for the variable




Using Input Variable Values
-------------------------------------------------------------
- Within the module that declared a variable, its value can be accessed from within 
expressions as var.<NAME>, where <NAME> matches the label given in the declaration block:

resource "aws_instance" "example" {
  instance_type = "t2.micro"
  ami           = var.image_id
}




Assigning Values to variables
--------------------------------------------------------------
1/ Assigning default values inside the variable block itself.

variable "instance_type" {
  type: string
  default = "t2.micro"
}



2/ on the Command Line with -var option.

- To specify individual variables on the command line, use the -var option when running 
the terraform plan and terraform apply commands:

$ terraform apply -var="image_id=ami-abc123"
$ terraform apply -var='image_id_list=["ami-abc123","ami-def456"]' -var="instance_type=t2.micro"
$ terraform apply -var='image_id_map={"us-east-1":"ami-abc123","us-east-2":"ami-def456"}'



3/ Variable Definitions (.tfvars) Files

- To set lots of variables, it is more convenient to specify their values in a variable 
definitions file.

- .tfvars or .tfvars.json

- default: terraform.tfvars.

terraform.tfvars
-------------------
image_id = "ami-abc123"
availability_zone_names = [
  "us-east-1a",
  "us-west-1c",
]

- Terraform also automatically loads a number of variable definitions files if they are present:
  - Files named exactly terraform.tfvars or terraform.tfvars.json.
  - Any files with names ending in .auto.tfvars or .auto.tfvars.json.

- If the file name is different ex: my_variables.tfvars, specify that file on the command 
line with -var-file

$ terraform apply -var-file="testing.tfvars"




4/ Using Environment Variables

- environment variables named TF_VAR_ followed by the name of a declared variable.

$ export TF_VAR_image_id=ami-abc123
$ export TF_VAR_availability_zone_names='["us-west-1b","us-west-1d"]'

$ terraform plan



Variable Definition Precedence
--------------------------------
- The above mechanisms for setting variables can be used together in any combination. 

- If the same variable is assigned multiple values, Terraform uses the last value it finds, 
overriding any previous values. 

Terraform loads variables in the following order:

1/ Environment variables

2/ The terraform.tfvars file, if present.

3/ The terraform.tfvars.json file, if present.

4/ Any *.auto.tfvars or *.auto.tfvars.json files, processed in lexical order of their filenames.

5/ Any -var and -var-file options on the command line






Values for Undeclared Variables
----------------------------------
- If you have defined a variable value, but not its corresponding variable {} definition, 
you may get an error or warning depending on how you have provided that value.

- If you provide values for undeclared variables defined as environment variables you will 
not get an error or warning. 


- If you provide values for undeclared variables defined in a file you will get a warning.
  - This is to help in cases where you have provided a variable value meant for a variable 
  declaration, but perhaps there is a mistake in the value definition.

ex:

variable "moose" {
  type = string
}

And the following .tfvars file (a typo error):
mosse = "Moose"







