- HCL stands for Hashocorp Configuration Language.
- terraform configuration file extension is .tf
- a configuration file consits of multiple blocks. a contain multiple arguments.
- a block can be of different types. ex: resource, data etc.


<block> <parameters> {
    key1 = value1
    key2 = value2
}

- ex: we want to create a file on our lcal system.

local provider: https://registry.terraform.io/providers/hashicorp/local/latest/docs
local file resource: https://registry.terraform.io/providers/hashicorp/local/latest/docs/resources/file


local.tf
---------
resource "local_file" "my_file" {
    filename = "/root/my_file.txt"
    content  = "We love Pets"
}

here:
    - type of block is -> resource.
    - resource type: local_file, resource type provides 2 info. the provider name (local) before _ 
    and the resource (file) after _
    - resource name: the logical name (my_file) is the identify the resource and it can be named anything.
    - *** once terraform applied, even changing this logical resource name will also trigger 
    a change on consecutive terraform plan/apply. ***
    - within this resource block inside the curly braces, we define the arguments. written in 
    ket/value format. these args are specific to the type of resource we are creating.

ex: a resource block (aws_instance) for provisioning a EC2 instance on aws.

resource "aws_instance" "webserver" {
    ami = "ami-"
    instalce_type = "t2-micro"
}




Conditional Expressions
===========================================
- A conditional expression uses the value of a boolean expression to select one of two values.

Syntax
-------
condition ? true_val : false_val


- A common use of conditional expressions is to define defaults to replace invalid values:

var.a != "" ? var.a : "default-a"


example:

conditional.tf
--------------
provider "aws" {
  region     = "us-west-2"
  access_key = "YOUR-ACCESS-KEY"
  secret_key = "YOUR-SECRET-KEY"
}

variable "istest" {}

resource "aws_instance" "dev" {
   ami = "ami-082b5a644766e0e6f"
   instance_type = "t2.micro"
   count = var.istest == true ? 3 : 0
}

resource "aws_instance" "prod" {
   ami = "ami-082b5a644766e0e6f"
   instance_type = "t2.large"
   count = var.istest == false ? 1 : 0
}


terraform.tfvars
----------------
istest = false




Locals
==========================================
provider "aws" {
  region     = "ap-southeast-1"
  access_key = "YOUR-ACCESS-KEY"
  secret_key = "YOUR-SECRET-KEY"
}

locals {
  common_tags = {
    Owner = "DevOps Team"
    service = "backend"
  }
}
resource "aws_instance" "app-dev" {
   ami = "ami-082b5a644766e0e6f"
   instance_type = "t2.micro"
   tags = local.common_tags
}

resource "aws_instance" "db-dev" {
   ami = "ami-082b5a644766e0e6f"
   instance_type = "t2.small"
   tags = local.common_tags
}

resource "aws_ebs_volume" "db_ebs" {
  availability_zone = "us-west-2a"
  size              = 8
  tags = local.common_tags
}

- *** IMP NOTE: Locals values supports expressions while input variables does not.
locals {
    name_prefix = "${var.name != '' ? var.name : var.default}"
}





Built-in Functions
===========================================================
- The Terraform language includes a number of built-in functions that you can call from 
within expressions to transform and combine values.

max(5, 12, 9)


- experiment with the behavior of Terraform's built-in functions from the Terraform 
expression console, by running terraform console

$ terraform console

$ terraform console 
> max (1,2,3)
3

1/ Numeric Functions:
---------------------------------------------------------------------
> abs(-12.4)
12.4

> ceil(5.1)
6

> floor(4.9)
4

> log(16, 2)
4

> max(12, 54, 3, ....)
54

> min(12, 54, 3)
3

> parseint("100", 10)  # arg1: string value of number, arg2: base (10)
100


> pow(3, 2)
9

> signum(-13)  # determines the sign of a number, returning a number
-1
> signum(0)
0
> signum(344)
1



2/ String Functions:
---------------------------------------------------------------------
> chomp("hello\n\n")        # removes newline characters at the end of a string.
hello


> endswith("hello world", "world") # eturns true if the first string ends with that exact suffix.
true

> startswith("hello world", "hello")
true

> format("Hello, %s!", "Ander")
Hello, Ander!

> formatlist("Hello, %s!", ["Valentina", "Ander", "Olivia", "Sam"])
[
  "Hello, Valentina!",
  "Hello, Ander!",
  "Hello, Olivia!",
  "Hello, Sam!",
]


> join(", ", ["foo", "bar", "baz"])
foo, bar, baz


> lower("HELLO")
hello

> upper("hello")
HELLO


> regex("[a-z]+", "53453453.345345aaabbbccc23454") #  arg1: regex pattern, arg2: string
aaabbbccc


> replace("1 + 2 + 3", "+", "-")
1 - 2 - 3


> split(",", "foo,bar,baz") # produces a list by dividing a given string
[
  "foo",
  "bar",
  "baz",
]


> strrev("hello")   # reverses the characters in a string.
olleh


> substr("hello world", 1, 4) # extracts a substring from a given string by offset and (maximum) length.
ello

> title("hello world")
Hello World


> trim("?!hello?!", "!?")
"hello"

> trimprefix("helloworld", "hello")
world

> trimsuffix("helloworld", "world")
hello

> trimspace("  hello\n\n")
hello


3/ Filesystem Functions
---------------------------------------------------------------------
> abspath("notes.txt") # if the path is not absolute, it will be joined with the current working directory.
"/Users/sandip/box/work/learnings/terraform/learn-terraform/hcl-basics/notes.txt"


> dirname("foo/bar/baz.txt")
foo/bar

> pathexpand("~/.ssh/id_rsa")
/home/steve/.ssh/id_rsa

> basename("foo/bar/baz.txt")   # removes all except the last portion from it.
baz.txt

> file("${path.module}/hello.txt")  # reads the contents of a file at the given path
Hello World

> fileexists("${path.module}/hello.txt")
true

> fileset(path.module, "files/*.txt")
[
  "files/hello.txt",
  "files/world.txt",
]

> filebase64("${path.module}/hello.txt")  # returns base64-encoded contents
SGVsbG8gV29ybGQ=




4/ Date and Time Functions
---------------------------------------------------------------------
# converts a timestamp into a different time format.

> formatdate("DD MMM YYYY hh:mm ZZZ", "2018-01-02T23:12:01Z")
02 Jan 2018 23:12 UTC



# adds a duration to a timestamp, returning a new timestamp.

> timeadd("2017-11-22T00:00:00Z", "10m")
2017-11-22T00:10:00Z


# compares two timestamps and returns a number (-1,0,1)

timestamp_a is before timestamp_b	              ==> -1
timestamp_a is the same instant as timestamp_b	==>  0
timestamp_a is after timestamp_b	1             ==>  1

> timecmp("2017-11-22T00:00:00Z", "2017-11-22T00:00:00Z")
0
> timecmp("2017-11-22T00:00:00Z", "2017-11-22T01:00:00Z")
-1
> timecmp("2017-11-22T01:00:00Z", "2017-11-22T00:00:00Z")
1




# returns a UTC timestamp string

> timestamp()
2018-05-13T07:44:12Z



5/ Collection Functions
------------------------------------------------------------------
# returns true if all elements in a given collection are true or "true"
# returns true if the collection is empty.

> alltrue(["true", true])
true
> alltrue([true, false])
false



> anytrue([true, false, "false"])
true



# splits a single list into fixed-size chunks, returning a list of lists.
> chunklist(["a", "b", "c", "d", "e"], 2)
[
  [
    "a",
    "b",
  ],
  [
    "c",
    "d",
  ],
  [
    "e",
  ],
]


# takes any number of arguments and returns the first one that isn't null or an empty string.
> coalesce("a", "b")
a
> coalesce("", "b")
b
> coalesce(1,2)
1




# takes any number of list arguments and returns the first one that isn't empty.

> coalescelist(["a", "b"], ["c", "d"])
[
  "a",
  "b",
]
> coalescelist([], ["c", "d"])
[
  "c",
  "d",
]



# takes a list of strings and returns a new list with any empty string elements removed.

> compact(["a", "", "b", "c"])
[
  "a",
  "b",
  "c",
]



# takes two or more lists and combines them into a single list.
> concat(["a", ""], ["b", "c"])
[
  "a",
  "",
  "b",
  "c",
]


# determines whether a given list or set contains a given single value as one of its elements.
> contains(["a", "b", "c"], "a")
true
> contains(["a", "b", "c"], "d")
false


# takes a list and returns a new list with any duplicate elements removed.
> distinct(["a", "b", "a", "c", "d", "b"])
[
  "a",
  "b",
  "c",
  "d",
]


# retrieves a single element from a list by index position
> element(["a", "b", "c"], 1)
b


# takes a list (incl. nested list) and replaces any elements that are lists with a flattened sequence of 
the list contents

> flatten([["a", "b"], [], ["c"]])
["a", "b", "c"]

> flatten([[["a", "b"], []], ["c"]])
["a", "b", "c"]



# finds the element index for a given value in a list.
> index(["a", "b", "c"], "b")
1


# takes a map and returns a list containing the keys from that map.
> keys({a=1, c=2, d=3})
[
  "a",
  "c",
  "d",
]


> values({a=3, c=2, d=1})
[
  3,
  2,
  1,
]


# zipmap constructs a map from a list of keys and a corresponding list of values.
> zipmap(["a", "b"], [1, 2])
{
  "a" = 1
  "b" = 2
}





# the length of a given list, map, or string.

> length([])
0
> length(["a", "b"])
2
> length({"a" = "b"})
1
> length("hello")
5

*** IMP NOTE
# retrieves the value of a single element from a map, given its key. 
If the given key does not exist, the given default value is returned instead.

> lookup({a="ay", b="bee"}, "a", "what?")
ay
> lookup({a="ay", b="bee"}, "c", "what?")
what?



# tolist converts its argument to a list value.
> tolist(["a", "b", "c"])
[
  "a",
  "b",
  "c",
]


# toset converts its argument to a set value.
> toset(["a", "b", "c"])
[
  "a",
  "b",
  "c",
]



# tomap converts its argument to a map value.
> tomap({"a" = 1, "b" = 2})
{
  "a" = 1
  "b" = 2
}


# tostring converts its argument to a string value.
> tostring("hello")
hello
> tostring(1)
1
> tostring(true)
true
> tostring(null)
null
> tostring([])
Error: Invalid function argument



# tonumber converts its argument to a number value.
> tonumber(1)
1
> tonumber("1")
1
> tonumber(null)
null
> tonumber("no")
Error: Invalid function argument



# tobool converts its argument to a boolean value.
> tobool(true)
true
> tobool("true")
true
> tobool(null)
null
> tobool("no")
Error: Invalid function argument
> tobool(1)
Error: Invalid function argument



# matchkeys constructs a new list by taking a subset of elements from one list whose 
indexes match the corresponding indexes of values in another list.

> matchkeys(["i-123", "i-abc", "i-def"], ["us-west", "us-east", "us-east"], ["us-east"])
[
  "i-abc",
  "i-def",
]



# merge takes an arbitrary number of maps or objects, and returns a single map or object 
that contains a merged set of elements from all arguments.
# If more than one given map or object defines the same key or attribute, then the one that 
is later in the argument sequence takes precedence.

> merge({a="b", c="d"}, {e="f", c="z"})
{
  "a" = "b"
  "c" = "z"
  "e" = "f"
}


# range generates a list of numbers using a start value, a limit value, and a step value.

> range(3)
[
  0,
  1,
  2,
]

> range(1, 4)
[
  1,
  2,
  3,
]

> range(1, 8, 2)
[
  1,
  3,
  5,
  7,
]


# reverse the order of sequence
> reverse([1, 2, 3])
[
  3,
  2,
  1,
]


# computes the intersection of the sets.
> setintersection(["a", "b"], ["b", "c"], ["b", "d"])
[
  "b",
]


# setproduct function finds all of the possible combinations of elements from all 
of the given sets by computing the Cartesian product.

> setproduct(["development", "staging", "production"], ["app1", "app2"])
[
  [
    "development",
    "app1",
  ],
  [
    "development",
    "app2",
  ],
  [
    "staging",
    "app1",
  ],
  [
    "staging",
    "app2",
  ],
  [
    "production",
    "app1",
  ],
  [
    "production",
    "app2",
  ],
]



# computes the union of the sets. removing duplicates
> setunion(["a", "b"], ["b", "c"], ["d"])
[
  "d",
  "b",
  "c",
  "a",
]



# slice extracts some consecutive elements from within a list.
# slice(list, startindex, endindex)
# startindex is inclusive, while endindex is exclusive.

> slice(["a", "b", "c", "d"], 1, 3)
[
  "b",
  "c",
]




> sort(["e", "d", "a", "x"])
[
  "a",
  "d",
  "e",
  "x",
]

> sum([10, 13, 6, 4.5])
33.5





