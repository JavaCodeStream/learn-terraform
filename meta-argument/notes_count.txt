The count Meta-Argument
=============================================
- By default, a resource block configures one real infrastructure object

- However, sometimes you want to manage several similar objects (like a fixed 
pool of ec2 compute instances) without writing a separate block for each one.

- two ways to do this: count and for_each.


resource "aws_instance" "instance-1" {
   ami = "ami-082b5a644766e0e6f"
   instance_type = "t2.micro"
   count = 3
}


Basic Syntax
--------------
- can be used with modules and with every resource type.

- accepts a whole number, and creates that many instances of the resource or module.

- Each instance has a distinct infrastructure object associated with it, and each is 
separately created, updated, or destroyed when the configuration is applied.


resource "aws_instance" "server" {
  count = 4 # create four similar EC2 instances

  ami           = "ami-a1b2c3d4"
  instance_type = "t2.micro"

  tags = {
    Name = "Server ${count.index}"
  }
}




The count Object
-----------------
- In blocks where count is set, an additional count object is available in expressions.

- count.index : The distinct index number (starting with 0) corresponding to this instance.



Referring to Instances
------------------------
- Instances are identified by an index number, starting with 0.

- <TYPE>.<NAME> or module.<NAME> (for example, aws_instance.server) refers to the resource block.

- <TYPE>.<NAME>[<INDEX>] or module.<NAME>[<INDEX>] 
(for example, aws_instance.server[0], aws_instance.server[1], etc.) refers to individual instances.





When to Use for_each Instead of count
------------------------------------------
- If your instances are almost identical, count is appropriate.


- If some of their arguments need distinct values that can't be directly derived 
from an integer, it's safer to use for_each.


- *** IMP NOTE: Before for_each was available, it was common to derive count from the length 
of a list and use count.index to look up the original list value:


variable "subnet_ids" {
  type = list(string)
}

resource "aws_instance" "server" {
  # Create one instance for each subnet
  count = length(var.subnet_ids)

  ami           = "ami-a1b2c3d4"
  instance_type = "t2.micro"
  subnet_id     = var.subnet_ids[count.index]

  tags = {
    Name = "Server ${count.index}"
  }
}


- This was fragile, because the resource instances were still identified by their index 
instead of the string values in the list. 

- If an element was removed from the middle of the list, every instance after that element 
would see its subnet_id value change.

- resulting unnecessary destroy/creation of resources.

- Using for_each gives the same flexibility.


Another example:

iam-count-parameter.tf
------------------------
provider "aws" {
  region     = "us-west-2"
  access_key = "YOUR-ACCESS-KEY"
  secret_key = "YOUR-SECRET-KEY"
}

variable "elb_names" {
  type = list(string)
  default = ["dev-loadbalancer", "stage-loadbalanacer","prod-loadbalancer"]
}

resource "aws_iam_user" "my_iam_user" {
  name = var.elb_names[count.index]
  count = 3
  path = "/system/"
}






