Terraform Resource
======================
- Resources are the most important element in the Terraform language. 
- Each resource block describes one or more infrastructure objects, such as 
virtual networks, compute instances, or higher-level components such as DNS records.
- few examples:
  - resource aws_instance
  - resource aws_alb
  - resource iam_user
  - resource local_file
  - resource random_pet

ex:

resource "aws_instance" "web" {
  ami           = "ami-a1b2c3d4"
  instance_type = "t2.micro"
}


- A resource block declares a resource of a given type ("aws_instance") with a 
given local name ("web").

- The name is used to refer to this resource from elsewhere in the same Terraform module, 
but has no significance outside that module's scope.

- The resource type and name together serve as an identifier for a given 
resource and so must be unique within a module.


- Within the block body (between { and }) are the configuration arguments 
for the resource itself. depend on the resource type.
example both ami and instance_type are arguments defined specifically for 
the aws_instance resource type.


Resource Types
---------------
- Each resource is associated with a single resource type, which determines 
the kind of infrastructure object it manages and what arguments and other 
attributes the resource supports.
ex: "aws_instance" is a resource type from aws provider.


Providers
----------------
- Each resource type is implemented by a provider, which is a plugin for Terraform 
that offers a collection of resource types.

- Terraform can automatically install most providers when initializing a working directory.


Resource Arguments
--------------------
- Most of the arguments within the body of a resource block are specific 
to the selected resource type.

- The values for resource arguments can make full use of expressions 
and other dynamic Terraform language features.


- There are also some meta-arguments that are defined by Terraform itself and apply 
across all resource types


Documentation for Resource Types
----------------------------------
- Every Terraform provider has its own documentation, describing its resource types 
and their arguments.

- Most publicly available providers are distributed on the Terraform Registry, which 
also hosts their documentation. 



Accessing Resource Attributes
---------------------------------
- Expressions within a Terraform module can access information about resources in 
the same module
- Use the <RESOURCE TYPE>.<NAME>.<ATTRIBUTE> syntax to reference a resource attribute 
in an expression.

- Many providers also include data sources, which are a special type of resource used 
only for looking up information.


Resource Dependencies
----------------------------------
- Most resources in a configuration don't have any particular relationship, and 
Terraform can make changes to several unrelated resources in parallel.

- However, some resources must be processed after other specific resources; sometimes 
this is because of how the resource works, and sometimes the resource's configuration 
just requires information generated by another resource.

- Most resource dependencies are handled automatically. Terraform analyses any expressions 
within a resource block to find references to other objects, and treats those references 
as implicit ordering requirements when creating, updating, or destroying resources. 

- However, some dependencies cannot be recognized implicitly in configuration.
- the depends_on meta-argument can explicitly specify a dependency.

Local-only Resources
----------------------
- While most resource types correspond to an infrastructure object type that is managed 
via a remote network API, there are certain specialized resource types that operate only 
within Terraform itself, calculating some results and saving those results in the state 
for future use.

ex: random local resource for generating random ids.


Meta-Argument
========================

depends_on
-----------
- explicitly specify a dependency when a resource or module relies on another resource's 
behavior but does not access any of that resource's data in its arguments.
- use the depends_on meta-argument in module blocks and in all 
resource blocks, regardless of resource type.
- We recommend always including a comment that explains why using depends_on is necessary.










