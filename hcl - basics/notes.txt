- HCL stands for Hashocorp Configuration Language.
- terraform configuration file extension is .tf
- a configuration file consits of multiple blocks. a contain multiple arguments.
- a block can be of different types. ex: resource, data etc.


<block> <parameters> {
    key1 = value1
    key2 = value2
}

- ex: we want to create a file on our lcal system.

local provider: https://registry.terraform.io/providers/hashicorp/local/latest/docs
local file resource: https://registry.terraform.io/providers/hashicorp/local/latest/docs/resources/file


local.tf

resource "local_file" "my_file" {
    filename = "/root/my_file.txt"
    content  = "We love Pets"
}

here:
    - type of block is -> resource.
    - resource type: local_file, resource type provides 2 info. the provider name (local) before _ 
    and the resource (file) after _
    - resource name: the logical name (my_file) is the identify the resource and it can be named anything.
    - *** once terraform applied, even changing this logical resource name will also trigger 
    a change on consecutive terraform plan/apply. ***
    - within this resource block inside the curly braces, we define the arguments. written in 
    ket/value format. these args are specific to the type of resource we are creating.

ex: a resource block (aws_instance) for provisioning a EC2 instance on aws.

resource "aws_instance" "webserver" {
    ami = "ami-"
    instalce_type = "t2-micro"
}

terraform commands
===========================
terrafom init
---------------
- lets now create the local_file resource.
- when we run terrafom init command, 
1/ it downloads the associated provider we added to main.tf into our 
working directory.
i.e. the code from local_provider and puts inside .terraform hidden folder.
2/ .terraform.lock.hcl  contains info about specific dependencies and providers install on
the working directory.

Note: Install tree command on Mac (brew install tree)

$ tree -a .
.
├── .terraform
│   └── providers
│       └── registry.terraform.io
│           └── hashicorp
│               └── local
│                   └── 2.3.0
│                       └── darwin_arm64
│                           └── terraform-provider-local_v2.3.0_x5
├── .terraform.lock.hcl
└── main.tf


.terraform.lock.hcl
---------------------
# This file is maintained automatically by "terraform init".
# Manual edits may be lost in future updates.

provider "registry.terraform.io/hashicorp/local" {
  version = "2.3.0"
  hashes = [
    "h1:U+DbBqKnXSIqC2z7qIko2dy8w6wwuZd89orPvfeqHk0=",
    ..
    ..
  ]
}


$ terraform init
Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/local versions matching "2.3.0"...
- Installing hashicorp/local v2.3.0...
- Installed hashicorp/local v2.3.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.



terraform plan
--------------
$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource 
actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # local_file.my_local_file will be created
  + resource "local_file" "my_local_file" {
      + content              = "We love Pets!"
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "./my_local_file.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take 
exactly these actions if you run "terraform apply" now.


terraform apply
----------------
- on executing terraform apply command it creates a tem file .terraform.tfstate.lock.info

.terraform.tfstate.lock.info
------------------------------
{"ID":"bb78cb27-cab8-751c-2149-62f1aa3fff52","Operation":"OperationTypeApply","Info":"",
"Who":"sandip@Sandips-MacBook-Air.local","Version":"1.3.7","Created":"2023-01-26T11:52:32.727249Z",
"Path":"terraform.tfstate"}

this lock file is to prevent mutiple terraform apply at the same time.

$ tree -a .
.
├── .terraform
│   └── providers
│       └── registry.terraform.io
│           └── hashicorp
│               └── local
│                   └── 2.3.0
│                       └── darwin_arm64
│                           └── terraform-provider-local_v2.3.0_x5
├── .terraform.lock.hcl
├── main.tf
├── my_local_file.txt
├── outputs.tf
└── terraform.tfstate


terraform.tfstate
-----------------
- it also creates terraform.tfstate file to track with real world infra.
- it contains the complete details of the resource (all attribute values)

{
  "version": 4,
  "terraform_version": "1.3.7",
  "serial": 1,
  "lineage": "ca6d76b1-0d33-b406-a02d-2cf0d065c71c",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "local_file",
      "name": "my_local_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "We love Pets!",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./my_local_file.txt",
            "id": "a7e247f5038ccec95d2b1df39696c5e3aab6909f",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}



- Now if we add outputs.tf but there is no change on main.tf, terraform apply does make
any change and hence no output will be displayed.

- Make some dummy change to main.tf file. <content = "We love Pets!!">

- Run terraform plan again. terraform plan always run terraform refresh internally which
refresh the state file with the real world infra.

- from the put we can see that the resource will be force replaced. "# local_file.my_local_file 
must be replaced" and it will be deleted and then re-created. this type of infra is called Immutable
Infra "Plan: 1 to add, 0 to change, 1 to destroy." as terraform is build like this.


terraform plan
---------------
$ terraform plan
local_file.my_local_file: Refreshing state... [id=a7e247f5038ccec95d2b1df39696c5e3aab6909f]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # local_file.my_local_file must be replaced
-/+ resource "local_file" "my_local_file" {
      ~ content              = "We love Pets!" -> "We love Pets!!" # forces replacement
      ~ id                   = "a7e247f5038ccec95d2b1df39696c5e3aab6909f" -> (known after apply)
        # (3 unchanged attributes hidden)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

─────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform 
can't guarantee to take exactly these actions if you run "terraform apply" now.


$ terraform apply
------------------
local_file.my_local_file: Refreshing state... [id=a7e247f5038ccec95d2b1df39696c5e3aab6909f]

Terraform used the selected providers to generate the following execution plan. Resource 
actions are indicated with the following
symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # local_file.my_local_file must be replaced
-/+ resource "local_file" "my_local_file" {
      ~ content              = "We love Pets!" -> "We love Pets!!" # forces replacement
      ~ id                   = "a7e247f5038ccec95d2b1df39696c5e3aab6909f" -> (known after apply)
        # (3 unchanged attributes hidden)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Changes to Outputs:
  + my_local_filename = "./my_local_file.txt"

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.my_local_file: Destroying... [id=a7e247f5038ccec95d2b1df39696c5e3aab6909f]
local_file.my_local_file: Destruction complete after 0s
local_file.my_local_file: Creating...
local_file.my_local_file: Creation complete after 0s [id=41610eb3392bd24a459b8db8eda9018e71b07857]

Apply complete! Resources: 1 added, 0 changed, 1 destroyed.

Outputs:

my_local_filename = "./my_local_file.txt"


terraform refresh
-------------------
$ terraform refresh 
local_file.my_local_file: Refreshing state... [id=41610eb3392bd24a459b8db8eda9018e71b07857]

Outputs:

my_local_filename = "./my_local_file.txt"



terraform output 
-----------------
$ terraform output my_local_filename

"./my_local_file.txt"



terraform.tfstate.backup
===========================
- on consecutive terraform apply, while the existing terraform.tfstate gets refresh post apply but
before that the previous state file gets also backedup (terraform.tfstate.backup)
- Now, the new terraform.tfstate will show the content attribute of local_file resource has updated.
and also the output section will have the outputs we newly added.

content of terraform.tfstate.backup
------------------------------------
{
  "version": 4,
  "terraform_version": "1.3.7",
  "serial": 1,
  "lineage": "ca6d76b1-0d33-b406-a02d-2cf0d065c71c",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "local_file",
      "name": "my_local_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "We love Pets!",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./my_local_file.txt",
            "id": "a7e247f5038ccec95d2b1df39696c5e3aab6909f",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}


ontent of terraform.tfstate
----------------------------
{
  "version": 4,
  "terraform_version": "1.3.7",
  "serial": 4,
  "lineage": "ca6d76b1-0d33-b406-a02d-2cf0d065c71c",
  "outputs": {
    "my_local_filename": {
      "value": "./my_local_file.txt",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "local_file",
      "name": "my_local_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "We love Pets!!",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./my_local_file.txt",
            "id": "41610eb3392bd24a459b8db8eda9018e71b07857",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}



terraform destroy
------------------
- the destroy shows the file will deleted.

- - symbol shows the resource and all of its atributes will be deleted.

- to go ahead with the destroy confirm 'yes' on the command prompt. "Enter a value: yes"

- after the destroy the terraform.tfstate file also gets empty keeping previous 
backup file (terraform.tfstate.backup)


$ terraform destroy 
local_file.my_local_file: Refreshing state... [id=41610eb3392bd24a459b8db8eda9018e71b07857]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  - destroy

Terraform will perform the following actions:

  # local_file.my_local_file will be destroyed
  - resource "local_file" "my_local_file" {
      - content              = "We love Pets!!" -> null
      - directory_permission = "0777" -> null
      - file_permission      = "0777" -> null
      - filename             = "./my_local_file.txt" -> null
      - id                   = "41610eb3392bd24a459b8db8eda9018e71b07857" -> null
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Changes to Outputs:
  - my_local_filename = "./my_local_file.txt" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

local_file.my_local_file: Destroying... [id=41610eb3392bd24a459b8db8eda9018e71b07857]
local_file.my_local_file: Destruction complete after 0s

Destroy complete! Resources: 1 destroyed.


