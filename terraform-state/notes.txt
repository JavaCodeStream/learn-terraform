Terraform State (terraform.tfstate)
=======================================
- terraform stores the state of the real world infrastructure that is being created from the TF files.

- This state allows terraform to map real world objects to our existing configuration.

- on terraform apply, Terraform write the current state post apply, into a file called terraform.tfstate. 
Terraform stores the IDs and properties of the resources it manages in this file, so that it 
can update or destroy those resources going forward.

- terraform plan reads the current state from the real world infra in real time, compares with the
previously written terraform.tfstate file combined with TF file configurations, creates an execution plan. 
Proposes a set of change actions that should, if applied, make the remote objects match the configuration.

- IMP NOTE: terraform plan proposes change actions for changes to the 
desired state described in TF configuration files. 
ex: on aws_instance resource type, if security_group was not described in TF file
i.e. by default the 'default' security_group will be linked to the created EC2 instanse. Now on 
changing the security group of the same EC2 instance to something else directly on aws console WILL NOT
propose any change action.

  resource "aws_instance" "myec2" {
    ami           = "ami-01a4f99c4ac11b03c"
    instance_type = "t2.micro"
  }

  - here securitry grouo does not come as part of desired state.
  - So, if we modify the real infra for the config that are not part of the desired state, terraform plan
  will not show any actions to revert those changes. 

  - that is why, its recommended, do not just specify the minimal things, specify all the important
  attributes as part of TF config so terraform always matches with desired state whenever we run 
  terraform plan.

  - terraform apply at this time, will NOT change the security group to default again, as the security_group
  is not described on TF file, hence will be ignored and the terraform.tfstate gets refreshed with 
  latest state of EC2 instance.


- NOTE: terraform plan command does not refresh terraform.tfstate file implicitly.

- run terraform refresh if we want to re-write the terraform.tfstate with the latest state of 
real world infra.

- whenever create a respurces (aws_instance), terraform behind the scene stores the complete details
with its all attributes in a local file called terraform.tfstate

- through this specific state file terraform tracks our infra related data.

- terraform use the state file to create/modify/destroy infra resources to match the desired state
i.e. the attribute values those are described in TF config file.

- NOTE: terraform state file also captures the TF outputs, resource type and its local 
recource name to its terraform.tfstate file. Hence, even if there is no change in TF config
for the resource attributes, BUT update local resource name, terraform plan/apply 
will recreate the resource.

    - for example: changing local resource name from resource "local_file" "my_local_file"
    to resource "local_file" "my_local_file1" -- cause below plan:

    $ terraform plan
        local_file.my_local_file: Refreshing state... [id=41610eb3392bd24a459b8db8eda9018e71b07857]

        Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
        symbols:
        + create
        - destroy

        Terraform will perform the following actions:

        # local_file.my_local_file will be destroyed
        # (because local_file.my_local_file is not in configuration)
        - resource "local_file" "my_local_file" {
            - content              = "We love Pets!!" -> null
            - directory_permission = "0777" -> null
            - file_permission      = "0777" -> null
            - filename             = "./my_local_file.txt" -> null
            - id                   = "41610eb3392bd24a459b8db8eda9018e71b07857" -> null
            }

        # local_file.my_local_file1 will be created
        + resource "local_file" "my_local_file1" {
            + content              = "We love Pets!!"
            + directory_permission = "0777"
            + file_permission      = "0777"
            + filename             = "./my_local_file.txt"
            + id                   = (known after apply)
            }

        Plan: 1 to add, 0 to change, 1 to destroy.



- BUT add/update/delete of TF outputs will cause updates to Terraform state, without changing 
any real infrastructure.

    - for example, added one more output, output "my_local_filename"
    outputs.tf
    ----------
    output "my_local_file_permission" {
        value = local_file.my_local_file1.file_permission
    }

    output "my_local_filename" {
        value = local_file.my_local_file1.filename
    }



    $ terraform plan 

        local_file.my_local_file1: Refreshing state... [id=41610eb3392bd24a459b8db8eda9018e71b07857]

        No changes. Your infrastructure matches the configuration.

        Terraform has compared your real infrastructure against your configuration and found no 
        differences, so no changes are needed.



    $ terraform apply 

        local_file.my_local_file1: Refreshing state... [id=41610eb3392bd24a459b8db8eda9018e71b07857]

        Changes to Outputs:
        + my_local_filename = "./my_local_file.txt"

        You can apply this plan to save these new output values to the Terraform state, without changing any real infrastructure.

        Do you want to perform these actions?
        Terraform will perform the actions described above.
        Only 'yes' will be accepted to approve.

        Enter a value: yes


        Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

        Outputs:

        my_local_file_permission = "0777"
        my_local_filename = "./my_local_file.txt"





ex:


aws resurce
-----------------------
main.tf
--------
provider "aws" {
  region  = "ap-south-1"
}

resource "aws_instance" "myec2" {
  ami           = "ami-01a4f99c4ac11b03c"
  instance_type = "t2.micro"

  tags = {
    Name = "MyEC2"
  }
}

$ terraform init

$ terraform apply
Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

myec2_public_ip = "13.233.227.191"
myec2_sg = toset([
  "default",
])



terraform.tfstate
------------------
{
  "version": 4,
  "terraform_version": "1.3.7",
  "serial": 9,
  "lineage": "0ecf90e3-5005-e7b4-3d62-468fe2718054",
  "outputs": {
    "myec2_public_ip": {
      "value": "13.233.227.191",
      "type": "string"
    },
    "myec2_sg": {
      "value": [
        "default"
      ],
      "type": [
        "set",
        "string"
      ]
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "myec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-01a4f99c4ac11b03c",
            "arn": "arn:aws:ec2:ap-south-1:295631050085:instance/i-0e325801aa13aa8a4",
            "associate_public_ip_address": true,
            "availability_zone": "ap-south-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-0e325801aa13aa8a4",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": 0,
            "primary_network_interface_id": "eni-01734d1f4976e2ae9",
            "private_dns": "ip-172-31-41-105.ap-south-1.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.41.105",
            "public_dns": "ec2-13-233-227-191.ap-south-1.compute.amazonaws.com",
            "public_ip": "13.233.227.191",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-07e2cb61837636d2e",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "default"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-0b0cbbfead5b4c566",
            "tags": {
              "Name": "MyEC2"
            },
            "tags_all": {
              "Name": "MyEC2"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-09821735d6cf83354"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ],
  "check_results": null
}




Changing Infra directly
----------------------------------------------
- Now lets say we change an attribute of the resource directly on the real world infra object

i.e. 
1/ create a custom security group 
2/ change the secury group from "default" to "custom-sg" on the ec2 created through terraform in AWS console.

- running terraform plan will read the latest state of ec2 instance from aws and compare with
the terrafom.tfstate file as well as any change on TF files in working directory to find 
if any change for the resource.

- NOTE: "aws_instance.myec2: Refreshing state... [id=i-0e325801aa13aa8a4]" on terrafom plan output
does not mean it refresh/re-creates the terraform.tfstate file.



$ terraform plan
aws_instance.myec2: Refreshing state... [id=i-0e325801aa13aa8a4]

Note: Objects have changed outside of Terraform

Terraform detected the following changes made outside of Terraform since the last "terraform apply" 
which may have affected this plan:

  # aws_instance.myec2 has changed
  ~ resource "aws_instance" "myec2" {
        id                                   = "i-0e325801aa13aa8a4"
      ~ security_groups                      = [
          + "custom-sg",
          - "default",
        ]
        tags                                 = {}
        # (30 unchanged attributes hidden)

        # (7 unchanged blocks hidden)
    }


Unless you have made equivalent changes to your configuration, or ignored the relevant attributes 
using ignore_changes, the following
plan may include actions to undo or respond to these changes.

────────────────────────────────────────────────────────────────────────────

Changes to Outputs:
  ~ myec2_sg = [
      + "custom-sg",
      - "default",
    ]

You can apply this plan to save these new output values to the Terraform state, without changing 
any real infrastructure.

───────────────────────────────────────────────────────────────────────────────


Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take 
exactly these actions if you run "terraform apply" now.




terraform apply
-----------------

- terraform apply shows 0 changed, just updated terraform.tfstate file with security group
as custom-sg

"security_groups": [
              "custom-sg"
            ]




$ terraform apply
aws_instance.myec2: Refreshing state... [id=i-0e325801aa13aa8a4]

Note: Objects have changed outside of Terraform

Terraform detected the following changes made outside of Terraform since the last "terraform apply" 
which may have affected this plan:

  # aws_instance.myec2 has changed
  ~ resource "aws_instance" "myec2" {
        id                                   = "i-0e325801aa13aa8a4"
      ~ security_groups                      = [
          + "custom-sg",
          - "default",
        ]
        tags                                 = {}
        # (30 unchanged attributes hidden)

        # (7 unchanged blocks hidden)
    }


Unless you have made equivalent changes to your configuration, or ignored the relevant attributes 
using ignore_changes, the following
plan may include actions to undo or respond to these changes.

──────────────────────────────────────────────────────────────────────────────────────


Changes to Outputs:
  ~ myec2_sg = [
      + "custom-sg",
      - "default",
    ]

You can apply this plan to save these new output values to the Terraform state, without changing any 
real infrastructure.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes


Apply complete! Resources: 0 added, 0 changed, 0 destroyed.

Outputs:

myec2_public_ip = "13.233.227.191"
myec2_sg = toset([
  "custom-sg",
])
myec2_tags = tomap({})




terraform.tfstate after apply
-------------------------------

{
  "version": 4,
  "terraform_version": "1.3.7",
  "serial": 16,
  "lineage": "0ecf90e3-5005-e7b4-3d62-468fe2718054",
  "outputs": {
    "myec2_public_ip": {
      "value": "13.233.227.191",
      "type": "string"
    },
    "myec2_sg": {
      "value": [
        "custom-sg"
      ],
      "type": [
        "set",
        "string"
      ]
    },
    "myec2_tags": {
      "value": {},
      "type": [
        "map",
        "string"
      ]
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "myec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-01a4f99c4ac11b03c",
            "arn": "arn:aws:ec2:ap-south-1:295631050085:instance/i-0e325801aa13aa8a4",
            "associate_public_ip_address": true,
            "availability_zone": "ap-south-1a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-0e325801aa13aa8a4",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": 0,
            "primary_network_interface_id": "eni-01734d1f4976e2ae9",
            "private_dns": "ip-172-31-41-105.ap-south-1.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.41.105",
            "public_dns": "ec2-13-233-227-191.ap-south-1.compute.amazonaws.com",
            "public_ip": "13.233.227.191",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-07e2cb61837636d2e",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "custom-sg"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-0b0cbbfead5b4c566",
            "tags": {},
            "tags_all": {},
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-09c2f2755a6f0dd7b"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ],
  "check_results": null
}
