State Command
========================
- While the format of the state files are just JSON, direct file editing of the state 
is discouraged for inspection and Modification.

- Terraform provides the terraform state command to perform basic modifications of 
the state using the CLI.

- As your Terraform usage becomes more advanced, there are some cases where you may 
need to modify the Terraform state. Rather than modify the state directly, the terraform 
state commands can be used in many cases instead.


Usage
Usage: terraform state <subcommand> [options] [args]


- The Terraform state subcommands all work with remote state just as if it was local state.

- terraform state list 
    - This command is used to list resources which are part of our Terraform state file.

- terraform state show
    - This command is used to show the attributes of a single resource in the Terraform state.


- terraform state mv
    - Usage: terraform state mv [options] SOURCE DESTINATION
    - The most common uses for terraform state mv are when you have renamed a 
    resource block in your configuration or you've moved a resource block 
    into a child module
    - in both cases with the intention of retaining the existing object but 
    tracking it under a new name
    - By default Terraform will understand moving or renaming a resource 
    configuration as a request to delete the old object and create a new object 
    at the new address.
    - so terraform state mv allows you to override that interpretation 
    by just attaching the existing object to the new address in Terraform, instead
    of delete and re-create with a new name (address).


- terraform state pull
    - Usage: terraform state pull
    - used to manually download and output the state from remote state to stdout.
    - useful for reading values out of state (potentially pairing this command with 
    something like jq).
    - so you dont need to login to aws and see the content of state file.


- terraform state push  
    - used to manually upload a local state file to remote state.
    - This command should rarely be used. no hands-on for this.


- terraform state rm
    - Normally Terraform automatically updates the state in response to actions taken 
    when applying a plan, while removing a binding for a remote object that has now been deleted.
    - use terraform state rm in the less common situation where you wish to remove a binding to 
    an existing remote object without first destroying it.
    - will effectively make Terraform "forget" the object while it continues to exist 
    in the remote system.
    - items removed using this command are not physically deleted and are only no longer
    managed by Terraform.
    ex: if we remove an AWS ec2 instance from state, the same ec2 will continue running,
    but terraform plan will no longer see that instance.





Hands-On
===============================================================
- This example: Remote state is used. hence, no terraform.tfstate on working directory
is found BUT, there is a local terraform.tfstate inside .terraform hidden folder which
contains the backend config details only (no resource level infra info)

$ pwd
/Users/sandip/box/work/learnings/terraform/learn-terraform/terraform-state/terraform-backend-s3


 tree -a .
.
├── .terraform
│   ├── providers
│   │   └── registry.terraform.io
│   │       └── hashicorp
│   │           └── aws
│   │               └── 4.53.0
│   │                   └── darwin_arm64
│   │                       └── terraform-provider-aws_v4.53.0_x5
│   └── terraform.tfstate
├── .terraform.lock.hcl
├── backend.tf
├── main.tf
├── outputs.tf
└── providers.tf


main.tf
--------
resource "aws_eip" "my_eip" {
  vpc = true
}


$ terraform state list
aws_eip.my_eip


--------------------------------------------------------------------------------------

- Here, this commands shows state details for the resource aws_eip.my_eip from the state 
file stored in S3 bucket.

$ terraform state show aws_eip.my_eip

# aws_eip.my_eip:
resource "aws_eip" "my_eip" {
    allocation_id        = "eipalloc-0b6541fe408cda589"
    domain               = "vpc"
    id                   = "eipalloc-0b6541fe408cda589"
    network_border_group = "ap-south-1"
    public_dns           = "ec2-35-154-189-250.ap-south-1.compute.amazonaws.com"
    public_ip            = "35.154.189.250"
    public_ipv4_pool     = "amazon"
    tags_all             = {}
    vpc                  = true
}

--------------------------------------------------------------------------------------

terraform state move
------------------------------------

$ pwd
/Users/sandip/box/work/learnings/terraform/learn-terraform/terraform-state/tf-state-move-command

$ tree
.
└── state-mgmt-mv.tf

state-mgmt-mv.tf
-----------------
provider "aws" {
  region     = "ap-south-1"
}

resource "aws_instance" "my_webapp" { # change name my_webapp -> my_ec2
  ami           = "ami-01a4f99c4ac11b03c" # get it from console as per your aws region
  instance_type = "t2.micro"
}

resource "aws_iam_user" "my_iam_user" {
  name = "loadbalancer"
  path = "/system/"
}

terraform {
  backend "s3" {
    bucket = "pausan-terraform-state"
    key    = "tf_state_mgmt_move.tfstate"
    region = "ap-south-1"
  }
}



$ terraform init 

Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v4.53.0...
- Installed hashicorp/aws v4.53.0 (signed by HashiCorp)

Terraform has been successfully initialized!


$ terraform apply -auto-approve

..
Plan: 2 to add, 0 to change, 0 to destroy..
..
aws_instance.my_webapp: Still creating... [20s elapsed]
aws_instance.my_webapp: Creation complete after 22s [id=i-0f58602bbe871b48b]
..
aws_iam_user.my_iam_user: Creating...
aws_iam_user.my_iam_user: Creation complete after 1s [id=loadbalancer]



$ aws s3 ls s3://pausan-terraform-state/

                           PRE network/
2023-02-04 20:54:05       5066 tf_state_mgmt_move.tfstate



- Now change the name of "aws_instance" "my_webapp" to "aws_instance" "my_ec2" 
in state-mgmt-mv.tf


- Running terraform plan will result deleting the existing resource with address 
aws_instance.my_webapp and create a new one with address: aws_instance.my_ec2

$ terraform plan 

# aws_instance.my_ec2 will be created
..
# aws_instance.my_webapp will be destroyed
# (because aws_instance.my_webapp is not in configuration)
..

Plan: 1 to add, 0 to change, 1 to destroy.





- Now run below move command:

$ terraform state mv aws_instance.my_webapp aws_instance.my_ec2

Move "aws_instance.my_webapp" to "aws_instance.my_ec2"
Successfully moved 1 object(s).



- Running terraform plan say. Now the infra is up-to-date.

$ terraform plan 

aws_iam_user.my_iam_user: Refreshing state... [id=loadbalancer]
aws_instance.my_ec2: Refreshing state... [id=i-0f58602bbe871b48b]

No changes. Your infrastructure matches the configuration.


--------------------------------------------------------------------------------------

$ terraform state pull

{
  "version": 4,
  "terraform_version": "1.3.7",
  "serial": 2,
  "lineage": "4aad2309-6ab4-17e7-51a2-3a8a83f35908",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "aws_iam_user",
      "name": "my_iam_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::295631050085:user/system/loadbalancer",
            "force_destroy": false,
            "id": "loadbalancer",
            "name": "loadbalancer",
            "path": "/system/",
            "permissions_boundary": null,
            "tags": null,
            "tags_all": {},
            "unique_id": "AIDAUJVH32VS6GB54JSZH"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "my_ec2",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-01a4f99c4ac11b03c",
            "arn": "arn:aws:ec2:ap-south-1:295631050085:instance/i-0f58602bbe871b48b",
            "associate_public_ip_address": true,
            "availability_zone": "ap-south-1b",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-0f58602bbe871b48b",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": 0,
            "primary_network_interface_id": "eni-041a18a26e2d7153a",
            "private_dns": "ip-172-31-5-129.ap-south-1.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "172.31.5.129",
            "public_dns": "ec2-13-127-238-167.ap-south-1.compute.amazonaws.com",
            "public_ip": "13.127.238.167",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "throughput": 0,
                "volume_id": "vol-05299936912f4912f",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [
              "default"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-011a1293620272feb",
            "tags": {},
            "tags_all": {},
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-09821735d6cf83354"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    }
  ],
  "check_results": null
}




--------------------------------------------------------------------------------------

terraform state rm
-------------------
$ terraform state list

aws_iam_user.my_iam_user
aws_instance.my_ec2

$ terraform state rm aws_instance.my_ec2

Removed aws_instance.my_ec2
Successfully removed 1 resource instance(s).

- while in AWS console, the same ec2 continues to be running.



- terraform state pull now does not show that ec2 instance anymore.

$ terraform state pull


{
  "version": 4,
  "terraform_version": "1.3.7",
  "serial": 3,
  "lineage": "4aad2309-6ab4-17e7-51a2-3a8a83f35908",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "aws_iam_user",
      "name": "my_iam_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::295631050085:user/system/loadbalancer",
            "force_destroy": false,
            "id": "loadbalancer",
            "name": "loadbalancer",
            "path": "/system/",
            "permissions_boundary": null,
            "tags": null,
            "tags_all": {},
            "unique_id": "AIDAUJVH32VS6GB54JSZH"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ],
  "check_results": null
}



- But since the resource "aws_instance" "my_ec2" is still there in our TF config file. nexttime,
terraform plan will again try to create the same.

$ terraform plan 

..
# aws_instance.my_ec2 will be created
..
..
..
Plan: 1 to add, 0 to change, 0 to destroy.






