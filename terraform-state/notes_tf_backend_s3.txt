Terraform Backend - S3
===========================

https://developer.hashicorp.com/terraform/language/settings/backends/s3

- Terraform has very good doc in configuring any of the supported backend, capturing all
permissions required for using the remote service.

- Stores the state as a given key in a given bucket on Amazon S3

- Just Storing the state file on S3 bucklet does not enable the State locking
feature by Default.

- Need to add few more configs for enabling state locking and consistency via Dynamo DB.

S3 Bucket Permissions
-----------------------
- following AWS IAM permissions on the target backend bucket
    - s3:ListBucket on arn:aws:s3:::mybucket
    - s3:GetObject on arn:aws:s3:::mybucket/path/to/my/key
    - s3:PutObject on arn:aws:s3:::mybucket/path/to/my/key
    - s3:DeleteObject on arn:aws:s3:::mybucket/path/to/my/key

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "arn:aws:s3:::mybucket"
    },
    {
      "Effect": "Allow",
      "Action": ["s3:GetObject", "s3:PutObject", "s3:DeleteObject"],
      "Resource": "arn:aws:s3:::mybucket/path/to/my/key"
    }
  ]
}



S3 State locking
-----------------
- enabled by setting the dynamodb_table field to an existing DynamoDB table name.

- A single DynamoDB table can be used to lock multiple remote state files.

- Terraform generates key names that include the values of the bucket and key variables.


Example Configuration
-----------------------
terraform {
  backend "s3" {
    bucket = "mybucket"
    key    = "path/to/my/key"
    region = "us-east-1"
  }
}



Hands-on
=========================
- Create a S3 bucket on aws console. bucket anme: pausan-terraform-state and create a folder: network
for keeping state file of of our network resource TF project.

$ pwd
/Users/sandip/box/work/learnings/terraform/learn-terraform/terraform-state/terraform-backend-s3

$ tree
.
├── backend.tf
├── main.tf
├── outputs.tf
└── providers.tf


backend.tf
-----------
terraform {
  backend "s3" {
    bucket = "kpausan-terraform-state"      # s3 bucket name
    key    = "network/terraform.tfstate"    # path i.e. s3 key where the tfstate file will be stored
    region = "ap-south-1"                   # s3 bucket region, since buckets can be created in any region
  }
}

providers.tf
-------------
provider "aws" {
  region     = "ap-south-1"
}

main.tf
-------------
resource "aws_eip" "my_eip" {
  vpc      = true
}


outputs.tf
------------
output "my_eip_public_ip" {
  value = aws_eip.my_eip.public_ip
}


- Before, we run terrafom plan, terraform needs to have credentials to login to aws and 
more over the terraform user should have access to perform RW actions on specified s3 bucket.

- Credntials for access_key and secret_key attributes for backend "s3" block, can be provided 
in multiple ways.
    - can also be sourced from the AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY environment variable, 
        AWS shared credentials file (e.g. ~/.aws/credentials), or AWS shared configuration 
        file (e.g. ~/.aws/config).

- We have already made use of WS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY environment variable.

- Here we will use AWS shared credentials file (e.g. ~/.aws/credentials)

- Install AWS CLI.
$ brew install awscli

- on VSCode terminal.

$ aws configure
AWS Access Key ID [None]: <pass_access_key>
AWS Secret Access Key [None]: <pass_secret_access_key>
Default region name [None]: <aws_account_region>
Default output format [None]:


- verify the aws s3 command workd.

$ aws s3 ls s3://pausan-terraform-state
                           PRE network/


$ cd ~

$ pwd
/Users/sandip


$ ls -ltra .aws

total 16
drwxr-xr-x+ 48 sandip  staff  1536  4 Feb 15:00 ..
-rw-------   1 sandip  staff   116  4 Feb 15:00 credentials
drwxr-xr-x   4 sandip  staff   128  4 Feb 15:00 .
-rw-------   1 sandip  staff    30  4 Feb 15:00 config



$ cat .aws/credentials 

[default]
aws_access_key_id = <your_access_key>
aws_secret_access_key = <secret_access_key>



NOTE: terrform init configurs the backend.

$ terraform init 

Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v4.53.0...
- Installed hashicorp/aws v4.53.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!



$ terraform apply -auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # aws_eip.my_eip will be created
  + resource "aws_eip" "my_eip" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags_all             = (known after apply)
      + vpc                  = true
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + my_eip_public_ip = (known after apply)
aws_eip.my_eip: Creating...
aws_eip.my_eip: Creation complete after 1s [id=eipalloc-0b6541fe408cda589]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

my_eip_public_ip = "35.154.189.250"



$ tree -a .
.
├── .terraform
│   ├── providers
│   │   └── registry.terraform.io
│   │       └── hashicorp
│   │           └── aws
│   │               └── 4.53.0
│   │                   └── darwin_arm64
│   │                       └── terraform-provider-aws_v4.53.0_x5
│   └── terraform.tfstate
├── .terraform.lock.hcl
├── backend.tf
├── main.tf
├── outputs.tf
└── providers.tf


$ aws s3 ls s3://pausan-terraform-state/network/
2023-02-04 14:42:24          0 
2023-02-04 15:09:06       1565 terraform.tfstate



s3://pausan-terraform-state/network/terraform.tfstate
------------------------------------------------------
{
  "version": 4,
  "terraform_version": "1.3.7",
  "serial": 0,
  "lineage": "2c08b7be-f86e-4218-7825-a6676734e745",
  "outputs": {
    "my_eip_public_ip": {
      "value": "35.154.189.250",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "aws_eip",
      "name": "my_eip",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": null,
            "allocation_id": "eipalloc-0b6541fe408cda589",
            "associate_with_private_ip": null,
            "association_id": "",
            "carrier_ip": "",
            "customer_owned_ip": "",
            "customer_owned_ipv4_pool": "",
            "domain": "vpc",
            "id": "eipalloc-0b6541fe408cda589",
            "instance": "",
            "network_border_group": "ap-south-1",
            "network_interface": "",
            "private_dns": null,
            "private_ip": "",
            "public_dns": "ec2-35-154-189-250.ap-south-1.compute.amazonaws.com",
            "public_ip": "35.154.189.250",
            "public_ipv4_pool": "amazon",
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxODAwMDAwMDAwMDAsInJlYWQiOjkwMDAwMDAwMDAwMCwidXBkYXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    }
  ],
  "check_results": null
}



- Also, we have noticed, there is one more terraform.tfstate inside .terraform folder. this local 
terraform.tfstate contains the most recent backend configuration like below:

"bucket": "pausan-terraform-state"
"key": "network/terraform.tfstate"
"region": "ap-south-1"


$ tree -a .terraform/

.terraform/
├── providers
│   └── registry.terraform.io
│       └── hashicorp
│           └── aws
│               └── 4.53.0
│                   └── darwin_arm64
│                       └── terraform-provider-aws_v4.53.0_x5
└── terraform.tfstate

7 directories, 2 files


.terraform/terraform.tfstate
-------------------------------
{
    "version": 3,
    "serial": 1,
    "lineage": "6f5a43d2-1556-adad-0b0e-02d1a2c11aaf",
    "backend": {
        "type": "s3",
        "config": {
            "access_key": null,
            "acl": null,
            "assume_role_duration_seconds": null,
            "assume_role_policy": null,
            "assume_role_policy_arns": null,
            "assume_role_tags": null,
            "assume_role_transitive_tag_keys": null,
            "bucket": "pausan-terraform-state",
            "dynamodb_endpoint": null,
            "dynamodb_table": null,
            "encrypt": null,
            "endpoint": null,
            "external_id": null,
            "force_path_style": null,
            "iam_endpoint": null,
            "key": "network/terraform.tfstate",
            "kms_key_id": null,
            "max_retries": null,
            "profile": null,
            "region": "ap-south-1",
            "role_arn": null,
            "secret_key": null,
            "session_name": null,
            "shared_credentials_file": null,
            "skip_credentials_validation": null,
            "skip_metadata_api_check": null,
            "skip_region_validation": null,
            "sse_customer_key": null,
            "sts_endpoint": null,
            "token": null,
            "workspace_key_prefix": null
        },
        "hash": 639530004
    },
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {},
            "depends_on": []
        }
    ]
}



