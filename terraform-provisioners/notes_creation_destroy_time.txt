Creation-Time & Destroy-Time Provisioners
============================================================
- Creation-Time provisioners are only run during creation, not during updating or any other
lifecycle. If a creation-time provisioners fails, resource is marked as tainted.

- Destroy-Time provisioners are run before the resource is destroyed.


Destroy-Time Provisioners
--------------------------
- If when = destroy is added within the provisioner sub-block, the provisioner will run when the
resource is destroyed.

- If they fail, Terraform will error and rerun the provisioners again on the next terraform apply. 
Due to this behavior, care should be taken for destroy provisioners to be safe to run multiple times.

resource "aws_instance" "myec2" {
   ami = "ami-0b1e534a4ff9019e0"
   instance_type = "t2.micro"


   provisioner "local-exec" {
    when    = destroy
    command = "echo 'Destroy-Time Provisioners'"
   }
   
}



Hands-On Creation & Destroy-Time Provisioners
-----------------------------------------------
- First go to aws console (ec2 instances -> key-pair(left panel)) and create a key pair: terraform-key-pair
    - Key pair type: RSA, Private key file format: .pem hit create key pair, this will download
    the terraform-key-pair.pem file. 
    - copy the pem file under working directory
    - Note: if you face any issues (I didnt face), (on Mac) run chmod 400 terraform-key-pair.pem

$ export AWS_ACCESS_KEY_ID="<>"
$ export AWS_SECRET_ACCESS_KEY="<>"

main.tf
--------
provider "aws" {
  region = "ap-south-1"
}

resource "aws_security_group" "allow_ssh" {
  name        = "allow_ssh"
  description = "Allow SSH inbound traffic"

  ingress {
    description = "SSH into VPC"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    description = "Outbound Allowed"
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "myec2" {
  ami           = "ami-01a4f99c4ac11b03c" # get it from console as per your aws region
  instance_type = "t2.micro"
  key_name      = "terraform-key-pair" # associate the key-pair to ec2, created separated on aws console

  vpc_security_group_ids = [aws_security_group.allow_ssh.id] # expression dependency

  provisioner "remote-exec" {
    # by default creation-time provisioner
    inline = [
      "sudo yum -y install nano"
    ]
  }

  provisioner "remote-exec" {
    when = destroy
    inline = [
      "sudo yum -y remove nano"
    ]
  }
  connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = file("./terraform-key-pair.pem")
    host        = self.public_ip # public IP of EC2 instance once its available.
  }
}




$ terraform fmt
main.tf
outputs.tf


$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.myec2 will be created
  + resource "aws_instance" "myec2" {
      + ami                                  = "ami-01a4f99c4ac11b03c"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "terraform-key-pair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags_all                             = (known after apply)
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_security_group.allow_ssh will be created
  + resource "aws_security_group" "allow_ssh" {
      + arn                    = (known after apply)
      + description            = "Allow SSH inbound traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Outbound Allowed"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 65535
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH into VPC"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "allow_ssh"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + myec2_key        = "terraform-key-pair"
  + myec2_private_ip = (known after apply)
  + myec2_public_ip  = (known after apply)




$ terraform apply -auto-approve

Terraform used the selected providers to generate the following execution plan. Resource 
actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.myec2 will be created
  + resource "aws_instance" "myec2" {
      + ami                                  = "ami-01a4f99c4ac11b03c"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "terraform-key-pair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags_all                             = (known after apply)
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_security_group.allow_ssh will be created
  + resource "aws_security_group" "allow_ssh" {
      + arn                    = (known after apply)
      + description            = "Allow SSH inbound traffic"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Outbound Allowed"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 65535
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH into VPC"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "allow_ssh"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + myec2_key        = "terraform-key-pair"
  + myec2_private_ip = (known after apply)
  + myec2_public_ip  = (known after apply)
aws_security_group.allow_ssh: Creating...
aws_security_group.allow_ssh: Creation complete after 2s [id=sg-09fc42c0062f2f549]
aws_instance.myec2: Creating...
aws_instance.myec2: Still creating... [10s elapsed]
aws_instance.myec2: Still creating... [20s elapsed]
aws_instance.myec2: Still creating... [30s elapsed]
aws_instance.myec2: Provisioning with 'remote-exec'...
aws_instance.myec2 (remote-exec): Connecting to remote host via SSH...
aws_instance.myec2 (remote-exec):   Host: 43.205.199.242
aws_instance.myec2 (remote-exec):   User: ec2-user
aws_instance.myec2 (remote-exec):   Password: false
aws_instance.myec2 (remote-exec):   Private key: true
aws_instance.myec2 (remote-exec):   Certificate: false
aws_instance.myec2 (remote-exec):   SSH Agent: true
aws_instance.myec2 (remote-exec):   Checking Host Key: false
aws_instance.myec2 (remote-exec):   Target Platform: unix
aws_instance.myec2 (remote-exec): Connected!
aws_instance.myec2 (remote-exec): +++++ Creation-Time remote-exec provisioner running!!! ++++++
aws_instance.myec2 (remote-exec): Loaded plugins: extras_suggestions,
aws_instance.myec2 (remote-exec):               : langpacks, priorities,
aws_instance.myec2 (remote-exec):               : update-motd
aws_instance.myec2 (remote-exec): Existing lock /var/run/yum.pid: another copy is running as pid 3198.
aws_instance.myec2 (remote-exec): Another app is currently holding the yum lock; waiting for it to exit...
aws_instance.myec2 (remote-exec):   The other application is: yum
aws_instance.myec2 (remote-exec):     Memory :  84 M RSS (376 MB VSZ)
aws_instance.myec2 (remote-exec):     Started: Sat Jan 28 22:44:34 2023 - 00:04 ago
aws_instance.myec2 (remote-exec):     State  : Running, pid: 3198
aws_instance.myec2 (remote-exec): Another app is currently holding the yum lock; waiting for it to exit...
aws_instance.myec2 (remote-exec):   The other application is: yum
aws_instance.myec2 (remote-exec):     Memory :  89 M RSS (382 MB VSZ)
aws_instance.myec2 (remote-exec):     Started: Sat Jan 28 22:44:34 2023 - 00:06 ago
aws_instance.myec2 (remote-exec):     State  : Running, pid: 3198
aws_instance.myec2 (remote-exec): Another app is currently holding the yum lock; waiting for it to exit...
aws_instance.myec2 (remote-exec):   The other application is: yum
aws_instance.myec2 (remote-exec):     Memory : 135 M RSS (427 MB VSZ)
aws_instance.myec2 (remote-exec):     Started: Sat Jan 28 22:44:34 2023 - 00:08 ago
aws_instance.myec2 (remote-exec):     State  : Running, pid: 3198
aws_instance.myec2: Still creating... [40s elapsed]
aws_instance.myec2 (remote-exec): Another app is currently holding the yum lock; waiting for it to exit...
aws_instance.myec2 (remote-exec):   The other application is: yum
aws_instance.myec2 (remote-exec):     Memory : 174 M RSS (467 MB VSZ)
aws_instance.myec2 (remote-exec):     Started: Sat Jan 28 22:44:34 2023 - 00:10 ago
aws_instance.myec2 (remote-exec):     State  : Running, pid: 3198
aws_instance.myec2 (remote-exec): Package nano-2.9.8-2.amzn2.0.1.x86_64 already installed and latest version
aws_instance.myec2 (remote-exec): Nothing to do
aws_instance.myec2: Creation complete after 43s [id=i-0584b6ec40b25812c]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

myec2_key = "terraform-key-pair"
myec2_private_ip = "172.31.40.30"
myec2_public_ip = "43.205.199.242"



- Here, right after the EC2 instance is created, terraform connects to EC2 via SSH on public IP
and install the Nano.

aws_instance.myec2: Provisioning with 'remote-exec'...
aws_instance.myec2 (remote-exec): Connecting to remote host via SSH...
aws_instance.myec2 (remote-exec):   Host: 43.205.199.242
aws_instance.myec2 (remote-exec):   User: ec2-user
aws_instance.myec2 (remote-exec):   Password: false
aws_instance.myec2 (remote-exec):   Private key: true
aws_instance.myec2 (remote-exec):   Certificate: false
aws_instance.myec2 (remote-exec):   SSH Agent: true
aws_instance.myec2 (remote-exec):   Checking Host Key: false
aws_instance.myec2 (remote-exec):   Target Platform: unix
aws_instance.myec2 (remote-exec): Connected!
aws_instance.myec2 (remote-exec): +++++ Creation-Time remote-exec provisioner running!!! ++++++
aws_instance.myec2 (remote-exec): Package nano-2.9.8-2.amzn2.0.1.x86_64 already installed and latest version
aws_instance.myec2 (remote-exec): Nothing to do





$ terraform destroy -auto-approve

aws_security_group.allow_ssh: Refreshing state... [id=sg-09fc42c0062f2f549]
aws_instance.myec2: Refreshing state... [id=i-0584b6ec40b25812c]

Terraform used the selected providers to generate the following execution plan. Resource 
actions are indicated with the following
symbols:
  - destroy

Terraform will perform the following actions:

  # aws_instance.myec2 will be destroyed
  - resource "aws_instance" "myec2" {
      - ami                                  = "ami-01a4f99c4ac11b03c" -> null
      - arn                                  = "arn:aws:ec2:ap-south-1:295631050085:instance/i-0584b6ec40b25812c" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "ap-south-1a" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-0584b6ec40b25812c" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - key_name                             = "terraform-key-pair" -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-0acf8ed07a9508b24" -> null
      - private_dns                          = "ip-172-31-40-30.ap-south-1.compute.internal" -> null
      - private_ip                           = "172.31.40.30" -> null
      - public_dns                           = "ec2-43-205-199-242.ap-south-1.compute.amazonaws.com" -> null
      - public_ip                            = "43.205.199.242" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [
          - "allow_ssh",
        ] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-0b0cbbfead5b4c566" -> null
      - tags                                 = {} -> null
      - tags_all                             = {} -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-09fc42c0062f2f549",
        ] -> null

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_put_response_hop_limit = 1 -> null
          - http_tokens                 = "optional" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/xvda" -> null
          - encrypted             = false -> null
          - iops                  = 100 -> null
          - tags                  = {} -> null
          - throughput            = 0 -> null
          - volume_id             = "vol-080c4db8e18f44510" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp2" -> null
        }
    }

  # aws_security_group.allow_ssh will be destroyed
  - resource "aws_security_group" "allow_ssh" {
      - arn                    = "arn:aws:ec2:ap-south-1:295631050085:security-group/sg-09fc42c0062f2f549" -> null
      - description            = "Allow SSH inbound traffic" -> null
      - egress                 = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = "Outbound Allowed"
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 65535
            },
        ] -> null
      - id                     = "sg-09fc42c0062f2f549" -> null
      - ingress                = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = "SSH into VPC"
              - from_port        = 22
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 22
            },
        ] -> null
      - name                   = "allow_ssh" -> null
      - owner_id               = "295631050085" -> null
      - revoke_rules_on_delete = false -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
      - vpc_id                 = "vpc-0e325a255f57c75c0" -> null
    }

Plan: 0 to add, 0 to change, 2 to destroy.

Changes to Outputs:
  - myec2_key        = "terraform-key-pair" -> null
  - myec2_private_ip = "172.31.40.30" -> null
  - myec2_public_ip  = "43.205.199.242" -> null
aws_instance.myec2: Destroying... [id=i-0584b6ec40b25812c]
aws_instance.myec2: Provisioning with 'remote-exec'...
aws_instance.myec2 (remote-exec): Connecting to remote host via SSH...
aws_instance.myec2 (remote-exec):   Host: 43.205.199.242
aws_instance.myec2 (remote-exec):   User: ec2-user
aws_instance.myec2 (remote-exec):   Password: false
aws_instance.myec2 (remote-exec):   Private key: true
aws_instance.myec2 (remote-exec):   Certificate: false
aws_instance.myec2 (remote-exec):   SSH Agent: true
aws_instance.myec2 (remote-exec):   Checking Host Key: false
aws_instance.myec2 (remote-exec):   Target Platform: unix
aws_instance.myec2 (remote-exec): Connected!
aws_instance.myec2 (remote-exec): +++++ Destroy-Time remote-exec provisioner running!!! +++++
aws_instance.myec2 (remote-exec): Loaded plugins: extras_suggestions,
aws_instance.myec2 (remote-exec):               : langpacks, priorities,
aws_instance.myec2 (remote-exec):               : update-motd
aws_instance.myec2 (remote-exec): Resolving Dependencies
aws_instance.myec2 (remote-exec): --> Running transaction check
aws_instance.myec2 (remote-exec): ---> Package nano.x86_64 0:2.9.8-2.amzn2.0.1 will be erased
aws_instance.myec2 (remote-exec): --> Finished Dependency Resolution

aws_instance.myec2 (remote-exec): Dependencies Resolved

aws_instance.myec2 (remote-exec): ========================================
aws_instance.myec2 (remote-exec):  Package
aws_instance.myec2 (remote-exec):       Arch   Version    Repository
aws_instance.myec2 (remote-exec):                                    Size
aws_instance.myec2 (remote-exec): ========================================
aws_instance.myec2 (remote-exec): Removing:
aws_instance.myec2 (remote-exec):  nano x86_64 2.9.8-2.amzn2.0.1
aws_instance.myec2 (remote-exec):                         installed 2.2 M

aws_instance.myec2 (remote-exec): Transaction Summary
aws_instance.myec2 (remote-exec): ========================================
aws_instance.myec2 (remote-exec): Remove  1 Package

aws_instance.myec2 (remote-exec): Installed size: 2.2 M
aws_instance.myec2 (remote-exec): Downloading packages:
aws_instance.myec2 (remote-exec): Running transaction check
aws_instance.myec2 (remote-exec): Running transaction test
aws_instance.myec2 (remote-exec): Transaction test succeeded
aws_instance.myec2 (remote-exec): Running transaction
aws_instance.myec2 (remote-exec):   Erasing    : nano-2.9.8-2.amzn2   1/1
aws_instance.myec2 (remote-exec):   Verifying  : nano-2.9.8-2.amzn2   1/1

aws_instance.myec2 (remote-exec): Removed:
aws_instance.myec2 (remote-exec):   nano.x86_64 0:2.9.8-2.amzn2.0.1

aws_instance.myec2 (remote-exec): Complete!
aws_instance.myec2: Still destroying... [id=i-0584b6ec40b25812c, 10s elapsed]
aws_instance.myec2: Still destroying... [id=i-0584b6ec40b25812c, 20s elapsed]
aws_instance.myec2: Still destroying... [id=i-0584b6ec40b25812c, 30s elapsed]
aws_instance.myec2: Still destroying... [id=i-0584b6ec40b25812c, 40s elapsed]
aws_instance.myec2: Destruction complete after 43s
aws_security_group.allow_ssh: Destroying... [id=sg-09fc42c0062f2f549]
aws_security_group.allow_ssh: Destruction complete after 1s

Destroy complete! Resources: 2 destroyed.





- Here, from the above logs we can see that, right before the EC destroyed, the remote-exec was
completed.

aws_instance.myec2 (remote-exec): Complete!
aws_instance.myec2: Still destroying... [id=i-0584b6ec40b25812c, 10s elapsed]
aws_instance.myec2: Still destroying... [id=i-0584b6ec40b25812c, 20s elapsed]
aws_instance.myec2: Still destroying... [id=i-0584b6ec40b25812c, 30s elapsed]
aws_instance.myec2: Still destroying... [id=i-0584b6ec40b25812c, 40s elapsed]
aws_instance.myec2: Destruction complete after 43s
aws_security_group.allow_ssh: Destroying... [id=sg-09fc42c0062f2f549]