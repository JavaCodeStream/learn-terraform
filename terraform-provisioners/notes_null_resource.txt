Provisioners Without a Resource i.e. null_resource
=============================================================
- If you need to run provisioners that aren't directly associated with a specific resource, you 
can associate them with a null_resource.

- Instances of null_resource are treated like normal resources, but they don't do anything. 

- Like with any other resource, you can configure provisioners and connection details on a null_resource. 

- You can also use its triggers argument and any meta-arguments to control exactly where 
in the dependency graph its provisioners will run.


- Null resources implements the standard resource life cycle but takes no further action.


UseCases 1:
----------------------------------------------------------
- Suppose, we want to run some scripts and if the scripts returns success, then only create
a particular resource.

ex: is curl to google.com is success, create the aws_eip resource i.e. Elastic IP.

main.tf
--------
provider "aws" {
  region     = "ap-south-1"
}

resource "aws_eip" "my_eip" {
  vpc      = true
  depends_on = [null_resource.health_check]
}

resource "null_resource" "health_check" {

 provisioner "local-exec" {

    command = "curl https://google.com"
  }
}


$ export AWS_ACCESS_KEY_ID="<>"
$ export AWS_SECRET_ACCESS_KEY="<>"

$ terraform init

$ terraform plan


$ terraform apply -auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # aws_eip.my_eip will be created
  + resource "aws_eip" "my_eip" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags_all             = (known after apply)
      + vpc                  = true
    }

  # null_resource.health_check will be created
  + resource "null_resource" "health_check" {
      + id = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.
null_resource.health_check: Creating...
null_resource.health_check: Provisioning with 'local-exec'...
null_resource.health_check (local-exec): Executing: ["/bin/sh" "-c" "curl https://google.com"]
null_resource.health_check (local-exec):   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
null_resource.health_check (local-exec):                                  Dload  Upload   Total   Spent    Left  Speed
null_resource.health_check (local-exec):   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
null_resource.health_check (local-exec): 100   220  100   220    0     0    876      0 --:--:-- --:--:-- --:--:--   876
null_resource.health_check (local-exec): <HTML><HEAD><meta http-equiv="content-type" content="text/html;charset=utf-8">
null_resource.health_check (local-exec): <TITLE>301 Moved</TITLE></HEAD><BODY>
null_resource.health_check (local-exec): <H1>301 Moved</H1>
null_resource.health_check (local-exec): The document has moved
null_resource.health_check (local-exec): <A HREF="https://www.google.com/">here</A>.
null_resource.health_check (local-exec): </BODY></HTML>
null_resource.health_check: Creation complete after 0s [id=5891885730746367639]
aws_eip.my_eip: Creating...
aws_eip.my_eip: Creation complete after 1s [id=eipalloc-0c80bb753e5ba22a4]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
Outputs:

my_eip_public_ip = "3.109.103.65"


- Here, we can see from logs, terraform first ran the curl to google.com and then created 
aws_eip resource.

null_resource.health_check: Provisioning with 'local-exec'...
null_resource.health_check (local-exec): Executing: ["/bin/sh" "-c" "curl https://google.com"]
aws_eip.my_eip: Creating...
aws_eip.my_eip: Creation complete after 1s [id=eipalloc-0c80bb753e5ba22a4]




- Now Change the curl URL to dummy and confirm the EIP does not get created as curl will fail and hence
null_resource.health_check will fail to get created.

main.tf
---------
provider "aws" {
  region     = "ap-south-1"
}

resource "aws_eip" "my_eip" {
  vpc      = true
  depends_on = [null_resource.health_check]
}

resource "null_resource" "health_check" {

 provisioner "local-exec" {
    command = "curl --connect-timeout 2 https://google123.com"
  }
}




$ terraform apply -auto-approve

null_resource.health_check (local-exec): curl: (28) Connection timed out after 2005 milliseconds
╷
│ Error: local-exec provisioner error







UseCases 2:
----------------------------------------------------------
https://developer.hashicorp.com/terraform/language/resources/provisioners/null_resource

- We have a cluster of EC2 instance, and we want to run a script whenever a new host gets added/removed
from the cluster.


main.tf
--------
provider "aws" {
  region = "ap-south-1"
}

resource "aws_instance" "my_ec2_cluster" {
  ami           = "ami-01a4f99c4ac11b03c" # get it from console as per your aws region ap-south-1
  instance_type = "t2.micro"
  count         = 1
  tags = {
    "cluster-name" = "my_ec2_cluster"
    "ec2-name"     = "my_ec2_${count.index}"
  }
}

resource "null_resource" "ip_check" {

  triggers = {
    latest_ips = join(",", aws_instance.my_ec2_cluster[*].public_ip)
  }
  provisioner "local-exec" {
    command = "echo Latest IPs are - ${null_resource.ip_check.triggers.latest_ips} > cluster_ips.txt"
  }
}


output.tf
---------
output "my_ec2_cluster_ips" {
    value = aws_instance.my_ec2_cluster[*].public_ip
}


$ terraform validate
Success! The configuration is valid.


$ terraform apply -auto-approve

Terraform used the selected providers to generate the following execution plan. Resource 
actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.my_ec2_cluster[0] will be created
  + resource "aws_instance" "my_ec2_cluster" {
      + ami                                  = "ami-01a4f99c4ac11b03c"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "cluster-name" = "my_ec2_cluster"
          + "ec2-name"     = "my_ec2_0"
        }
      + tags_all                             = {
          + "cluster-name" = "my_ec2_cluster"
          + "ec2-name"     = "my_ec2_0"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # null_resource.ip_check will be created
  + resource "null_resource" "ip_check" {
      + id       = (known after apply)
      + triggers = {
          + "latest_ips" = (known after apply)
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + my_ec2_cluster_ips = [
      + (known after apply),
    ]
aws_instance.my_ec2_cluster[0]: Creating...
aws_instance.my_ec2_cluster[0]: Still creating... [10s elapsed]
aws_instance.my_ec2_cluster[0]: Still creating... [20s elapsed]
aws_instance.my_ec2_cluster[0]: Still creating... [30s elapsed]
aws_instance.my_ec2_cluster[0]: Creation complete after 32s [id=i-0d645c0c6c3cee17c]
null_resource.ip_check: Creating...
null_resource.ip_check: Provisioning with 'local-exec'...
null_resource.ip_check (local-exec): Executing: ["/bin/sh" "-c" "echo Latest IPs are - 13.127.216.228 > cluster_ips.txt"]
null_resource.ip_check: Creation complete after 0s [id=1189708246351396474]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

my_ec2_cluster_ips = [
  "13.127.216.228",
]



$ cat cluster_ips.txt 
Latest IPs are - 13.127.216.228



- Now, increase no of count attribute in main.tf

resource "aws_instance" "my_ec2_cluster" {
  ami           = "ami-01a4f99c4ac11b03c" # get it from console as per your aws region ap-south-1
  instance_type = "t2.micro"
  count         = 3
  tags = {
    "cluster-name" = "my_ec2_cluster"
    "ec2-name"     = "my_ec2_${count.index}"
  }
}





$ terraform apply -auto-approve
aws_instance.my_ec2_cluster[0]: Refreshing state... [id=i-0d645c0c6c3cee17c]
null_resource.ip_check: Refreshing state... [id=1189708246351396474]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # aws_instance.my_ec2_cluster[1] will be created
  + resource "aws_instance" "my_ec2_cluster" {
      + ami                                  = "ami-01a4f99c4ac11b03c"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "cluster-name" = "my_ec2_cluster"
          + "ec2-name"     = "my_ec2_1"
        }
      + tags_all                             = {
          + "cluster-name" = "my_ec2_cluster"
          + "ec2-name"     = "my_ec2_1"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.my_ec2_cluster[2] will be created
  + resource "aws_instance" "my_ec2_cluster" {
      + ami                                  = "ami-01a4f99c4ac11b03c"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "cluster-name" = "my_ec2_cluster"
          + "ec2-name"     = "my_ec2_2"
        }
      + tags_all                             = {
          + "cluster-name" = "my_ec2_cluster"
          + "ec2-name"     = "my_ec2_2"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # null_resource.ip_check must be replaced
-/+ resource "null_resource" "ip_check" {
      ~ id       = "1189708246351396474" -> (known after apply)
      ~ triggers = { # forces replacement
          ~ "latest_ips" = "13.127.216.228" -> (known after apply)
        }
    }

Plan: 3 to add, 0 to change, 1 to destroy.

Changes to Outputs:
  ~ my_ec2_cluster_ips = [
        "13.127.216.228",
      + (known after apply),
      + (known after apply),
    ]
null_resource.ip_check: Destroying... [id=1189708246351396474]
null_resource.ip_check: Destruction complete after 0s
aws_instance.my_ec2_cluster[1]: Creating...
aws_instance.my_ec2_cluster[2]: Creating...
aws_instance.my_ec2_cluster[1]: Still creating... [10s elapsed]
aws_instance.my_ec2_cluster[2]: Still creating... [10s elapsed]
aws_instance.my_ec2_cluster[2]: Still creating... [20s elapsed]
aws_instance.my_ec2_cluster[1]: Still creating... [20s elapsed]
aws_instance.my_ec2_cluster[1]: Still creating... [30s elapsed]
aws_instance.my_ec2_cluster[2]: Still creating... [30s elapsed]
aws_instance.my_ec2_cluster[2]: Creation complete after 32s [id=i-03c9fe36e9aa60e41]
aws_instance.my_ec2_cluster[1]: Creation complete after 32s [id=i-0f2e1bb8854a8cd32]
null_resource.ip_check: Creating...
null_resource.ip_check: Provisioning with 'local-exec'...
null_resource.ip_check (local-exec): Executing: ["/bin/sh" "-c" "echo Latest IPs are - 13.127.216.228,13.127.203.139,13.232.243.16 > cluster_ips.txt"]
null_resource.ip_check: Creation complete after 0s [id=8698069785924592912]

Apply complete! Resources: 3 added, 0 changed, 1 destroyed.

Outputs:

my_ec2_cluster_ips = [
  "13.127.216.228",
  "13.127.203.139",
  "13.232.243.16",
]



$ cat cluster_ips.txt 
Latest IPs are - 13.127.216.228,13.127.203.139,13.232.243.16





