terraform commands
===========================

List of commands:
Primary:
1/ terraform init
2/ terraform plan
3/ terraform apply  (optional -auto-approve to avoide confirming action)
4/ terraform destroy (optional -auto-approve to avoide confirming action)
4b/ terraform fmt

Others:
5/ terraform refresh                    - refresh the state file with current state of real world infra
6/ terraform output                     - prints only the outputs after apply from current state file.
7/ terraform output <output_name>
7b/ terraform output -json              - produce JSON output, specifically intended for consumption 
by external software
8/ terraform destroy with -target flag  - allows to destroy specific resource.
9/ erraform init -upgrade               - to allow selection of new versions i.e. override 
the earlier locked version (recorded in .terraform.lock.hcl) with newer version.
10/ terraform providers                 - shows information about the provider requirements of the 
configuration in the current working directory.
11/ terraform version                   - shows terraform cli and provider versions installed 
for the current working directory.
12/ terraform show                      - shows output from latest state
12b/ terraform show -json               - json formatted output
13/ terraform fmt                       - Formats your configuration with correct indentation and 
automatically updates configurations in the current directory. print out the names of the files 
it modified, if any.
14/ terraform validate                  - make sure your configuration is syntactically valid




terrafom init
============================================
- lets now create the local_file resource.
- when we run terrafom init command, 

Note: Install tree command on Mac (brew install tree)

$ tree -a .
.
├── .terraform
│   └── providers
│       └── registry.terraform.io
│           └── hashicorp
│               └── local
│                   └── 2.3.0
│                       └── darwin_arm64
│                           └── terraform-provider-local_v2.3.0_x5
├── .terraform.lock.hcl
└── main.tf

1/ .terraform

- it downloads the associated provider we added to main.tf into our 
working directory.
i.e. the code from local_provider and puts inside .terraform hidden folder.


2/ .terraform.lock.hcl

- .terraform.lock.hcl contains info about specific version of providers installed on
the working directory. this file is known as dependency lock file.

- Terraform automatically creates or updates the dependency lock file each time you 
run the terraform init command

- You should include this file in your version control repository so that you can 
discuss potential changes to your external dependencies via code review, just as you 
would discuss potential changes to your configuration itself.

- *** If a particular provider already has a selection recorded in the lock file, 
Terraform will always re-select that version for installation, even if a newer 
version has become available.

- *** You can override that behavior by adding the -upgrade option when you run 
terraform init, in which case Terraform will disregard the existing selections 
and once again select the newest available version matching the version constraint.



Dependency Lock file (.terraform.lock.hcl)
--------------------------------------------
# This file is maintained automatically by "terraform init".
# Manual edits may be lost in future updates.

provider "registry.terraform.io/hashicorp/local" {
  version = "2.3.0"
  hashes = [
    "h1:U+DbBqKnXSIqC2z7qIko2dy8w6wwuZd89orPvfeqHk0=",
    ..
    ..
  ]
}


$ terraform init
Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/local versions matching "2.3.0"...
- Installing hashicorp/local v2.3.0...
- Installed hashicorp/local v2.3.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.



terraform plan
============================================

$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource 
actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # local_file.my_local_file will be created
  + resource "local_file" "my_local_file" {
      + content              = "We love Pets!"
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "./my_local_file.txt"
      + id                   = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take 
exactly these actions if you run "terraform apply" now.


terraform apply
----------------
- on executing terraform apply command it creates a tem file .terraform.tfstate.lock.info

.terraform.tfstate.lock.info
------------------------------
{"ID":"bb78cb27-cab8-751c-2149-62f1aa3fff52","Operation":"OperationTypeApply","Info":"",
"Who":"sandip@Sandips-MacBook-Air.local","Version":"1.3.7","Created":"2023-01-26T11:52:32.727249Z",
"Path":"terraform.tfstate"}

- this lock file is to prevent mutiple terraform apply at the same time.

$ tree -a .
.
├── .terraform
│   └── providers
│       └── registry.terraform.io
│           └── hashicorp
│               └── local
│                   └── 2.3.0
│                       └── darwin_arm64
│                           └── terraform-provider-local_v2.3.0_x5
├── .terraform.lock.hcl
├── main.tf
├── my_local_file.txt
├── outputs.tf
└── terraform.tfstate


terraform.tfstate
-----------------
- it also creates terraform.tfstate file to track with real world infra.
- it contains the complete details of the resource (all attribute values)

{
  "version": 4,
  "terraform_version": "1.3.7",
  "serial": 1,
  "lineage": "ca6d76b1-0d33-b406-a02d-2cf0d065c71c",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "local_file",
      "name": "my_local_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "We love Pets!",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./my_local_file.txt",
            "id": "a7e247f5038ccec95d2b1df39696c5e3aab6909f",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}



- Now if we add outputs.tf but there is no change on main.tf, terraform apply does make
any change and hence no output will be displayed.

- Make some dummy change to main.tf file. <content = "We love Pets!!">

- Run terraform plan again. terraform plan always run terraform refresh internally which
refresh the state file with the real world infra.

- from the put we can see that the resource will be force replaced. "# local_file.my_local_file 
must be replaced" and it will be deleted and then re-created. this type of infra is called Immutable
Infra "Plan: 1 to add, 0 to change, 1 to destroy.".


terraform plan
---------------
$ terraform plan
local_file.my_local_file: Refreshing state... [id=a7e247f5038ccec95d2b1df39696c5e3aab6909f]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # local_file.my_local_file must be replaced
-/+ resource "local_file" "my_local_file" {
      ~ content              = "We love Pets!" -> "We love Pets!!" # forces replacement
      ~ id                   = "a7e247f5038ccec95d2b1df39696c5e3aab6909f" -> (known after apply)
        # (3 unchanged attributes hidden)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

─────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform 
can't guarantee to take exactly these actions if you run "terraform apply" now.


$ terraform apply
------------------
local_file.my_local_file: Refreshing state... [id=a7e247f5038ccec95d2b1df39696c5e3aab6909f]

Terraform used the selected providers to generate the following execution plan. Resource 
actions are indicated with the following
symbols:
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # local_file.my_local_file must be replaced
-/+ resource "local_file" "my_local_file" {
      ~ content              = "We love Pets!" -> "We love Pets!!" # forces replacement
      ~ id                   = "a7e247f5038ccec95d2b1df39696c5e3aab6909f" -> (known after apply)
        # (3 unchanged attributes hidden)
    }

Plan: 1 to add, 0 to change, 1 to destroy.

Changes to Outputs:
  + my_local_filename = "./my_local_file.txt"

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

local_file.my_local_file: Destroying... [id=a7e247f5038ccec95d2b1df39696c5e3aab6909f]
local_file.my_local_file: Destruction complete after 0s
local_file.my_local_file: Creating...
local_file.my_local_file: Creation complete after 0s [id=41610eb3392bd24a459b8db8eda9018e71b07857]

Apply complete! Resources: 1 added, 0 changed, 1 destroyed.

Outputs:

my_local_filename = "./my_local_file.txt"


terraform refresh
============================================
$ terraform refresh 
local_file.my_local_file: Refreshing state... [id=41610eb3392bd24a459b8db8eda9018e71b07857]

Outputs:

my_local_filename = "./my_local_file.txt"



terraform output 
============================================
$ terraform output
my_local_file_content = "We love Pets!"
random_pet_id = "Mrs.kangaroo"

$ terraform output random_pet_id
"Mrs.kangaroo"

$ terraform output -json
{
  "my_local_file_content": {
    "sensitive": false,
    "type": "string",
    "value": "We love Pets!"
  },
  "random_pet_id": {
    "sensitive": false,
    "type": "string",
    "value": "Mrs.doe"
  }
}



terraform.tfstate.backup
===========================
- on consecutive terraform apply, while the existing terraform.tfstate gets refresh post apply but
before that the previous state file gets also backedup (terraform.tfstate.backup)
- Now, the new terraform.tfstate will show the content attribute of local_file resource has updated.
and also the output section will have the outputs we newly added.

content of terraform.tfstate.backup
------------------------------------
{
  "version": 4,
  "terraform_version": "1.3.7",
  "serial": 1,
  "lineage": "ca6d76b1-0d33-b406-a02d-2cf0d065c71c",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "local_file",
      "name": "my_local_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "We love Pets!",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./my_local_file.txt",
            "id": "a7e247f5038ccec95d2b1df39696c5e3aab6909f",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}


ontent of terraform.tfstate
----------------------------
{
  "version": 4,
  "terraform_version": "1.3.7",
  "serial": 4,
  "lineage": "ca6d76b1-0d33-b406-a02d-2cf0d065c71c",
  "outputs": {
    "my_local_filename": {
      "value": "./my_local_file.txt",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "local_file",
      "name": "my_local_file",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "We love Pets!!",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./my_local_file.txt",
            "id": "41610eb3392bd24a459b8db8eda9018e71b07857",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": null
}



terraform destroy
============================================
- the destroy shows the file will deleted.

- - symbol shows the resource and all of its atributes will be deleted.

- to go ahead with the destroy confirm 'yes' on the command prompt. "Enter a value: yes"

- after the destroy the terraform.tfstate file also gets empty keeping previous 
backup file (terraform.tfstate.backup)


$ terraform destroy 
local_file.my_local_file: Refreshing state... [id=41610eb3392bd24a459b8db8eda9018e71b07857]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  - destroy

Terraform will perform the following actions:

  # local_file.my_local_file will be destroyed
  - resource "local_file" "my_local_file" {
      - content              = "We love Pets!!" -> null
      - directory_permission = "0777" -> null
      - file_permission      = "0777" -> null
      - filename             = "./my_local_file.txt" -> null
      - id                   = "41610eb3392bd24a459b8db8eda9018e71b07857" -> null
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Changes to Outputs:
  - my_local_filename = "./my_local_file.txt" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

local_file.my_local_file: Destroying... [id=41610eb3392bd24a459b8db8eda9018e71b07857]
local_file.my_local_file: Destruction complete after 0s

Destroy complete! Resources: 1 destroyed.


terraform destroy with -target flag
============================================
- the -target option can be used to focus terraform's attention to only a subset of resources
instead of all the resources.

- <resource_type>.<local_resource_name>

- for example if we had 2 of the below resources:

main.tf
-------
resource "local_file" "my_local_file" {
  filename = "${path.module}/my_local_file"
  content  = "We love Pets!"
}

resource "random_pet" "my_pet" {
  prefix    = "Mrs"
  separator = "."
  length    = 1
}

- to destroy only local_file.my_local_file
$ terraform destroy -target local_file.my_local_file

Destroy complete! Resources: 1 destroyed.


- to destroy multiple resources
$ terraform destroy -target local_file.my_local_file -target random_pet.my_pet

Destroy complete! Resources: 2 destroyed.


terraform init -upgrade 
============================================
- lets say, terrafom init was executed with a provider version "~> 3.3.0" which actually downloaded
version "3.3.2" of the same provider, and terraform locks down this partuclar version 
in .terraform.lock.hcl file to prevent version upgrades.

main.tf
--------
terraform {
  required_providers {
    random = {
      source = "hashicorp/random"
      version = "~> 3.3.0"
    }
  }
}

.terraform.lock.hcl
----------------------
provider "registry.terraform.io/hashicorp/random" {
  version     = "3.3.2"
  constraints = "~> 3.3.0"
  hashes = [
    "h1:NvMyFNHHq65GUNyBGjLuLD4ABA6sTlRebZCIK5OtvFU=",
..
.

- at this moment, if we try to add a new version ex: version "~> 3.2.0" in provider block, terraform init
throws error.

terraform {
  required_providers {
    random = {
      source = "hashicorp/random"
      version = "~> 3.2.0"
    }
  }
}

$ terraform init

"locked provider
│ registry.terraform.io/hashicorp/random 3.3.2 does not match configured version 
| constraint ~> 3.2.0; must use terraform init -upgrade
│ to allow selection of new versions"


- terraform init -upgrade command allows to change the version. helps in safe gaurding the locked 
provider version.

$ terraform init -upgrade 

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/random versions matching "~> 3.2.0"...
- Installing hashicorp/random v3.2.0...
- Installed hashicorp/random v3.2.0 (signed by HashiCorp)

Terraform has made some changes to the provider dependency selections recorded
in the .terraform.lock.hcl file. Review those changes and commit them to your
version control system if they represent changes you intended to make.

Terraform has been successfully initialized!


terraform providers
============================================
$ terraform providers 

Providers required by configuration:
.
├── provider[registry.terraform.io/hashicorp/local]
└── provider[registry.terraform.io/hashicorp/random]


terraform version
============================================
$ terraform version
Terraform v1.3.7
on darwin_arm64
+ provider registry.terraform.io/hashicorp/local v2.3.0
+ provider registry.terraform.io/hashicorp/random v3.4.3


terraform show
============================================
$ terraform show

Outputs:

my_local_file_content = "We love Pets!"
random_pet_id = "Mrs.doe"


$ terraform show -json

{"format_version":"1.0","terraform_version":"1.3.7","values":{"outputs":
{"my_local_file_content":{"sensitive":false,"value":"We love Pets!","type":"string"},
"random_pet_id":{"sensitive":false,"value":"Mrs.doe","type":"string"}},"root_module":{}}}


terraform fmt
============================================
$ terraform fmt
main.tf

$ terraform fmt   # running again wont print any file as its already formatted.




terraform validate
============================================
added type 'sources' instead of 'source' in main.tf
-----------------------------------------------------
terraform {
  required_providers {
    random = {
      sources  = "hashicorp/random"
      version = "~> 3.2.0"
    }
  }
}


$ terraform validate 
╷
│ Error: Invalid required_providers object
│ 
│   on main.tf line 4, in terraform:
│    4:       sources  = "hashicorp/random"
│ 
│ required_providers objects can only contain "version", "source" and "configuration_aliases" attributes. To configure a provider, use a
│ "provider" block.


